// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: bilibili/playershared/playershared.proto

package playershared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
type ArcType int32

const (
	//
	ArcType_ARC_TYPE_NORMAL ArcType = 0
	//
	ArcType_ARC_TYPE_INTERACT ArcType = 1
)

// Enum value maps for ArcType.
var (
	ArcType_name = map[int32]string{
		0: "ARC_TYPE_NORMAL",
		1: "ARC_TYPE_INTERACT",
	}
	ArcType_value = map[string]int32{
		"ARC_TYPE_NORMAL":   0,
		"ARC_TYPE_INTERACT": 1,
	}
)

func (x ArcType) Enum() *ArcType {
	p := new(ArcType)
	*p = x
	return p
}

func (x ArcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArcType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[0].Descriptor()
}

func (ArcType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[0]
}

func (x ArcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArcType.Descriptor instead.
func (ArcType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{0}
}

//
type BizType int32

const (
	//
	BizType_BIZ_TYPE_UNKNOWN BizType = 0
	//
	BizType_BIZ_TYPE_UGC BizType = 1
	//
	BizType_BIZ_TYPE_PGC BizType = 2
	//
	BizType_BIZ_TYPE_PUGV BizType = 3
)

// Enum value maps for BizType.
var (
	BizType_name = map[int32]string{
		0: "BIZ_TYPE_UNKNOWN",
		1: "BIZ_TYPE_UGC",
		2: "BIZ_TYPE_PGC",
		3: "BIZ_TYPE_PUGV",
	}
	BizType_value = map[string]int32{
		"BIZ_TYPE_UNKNOWN": 0,
		"BIZ_TYPE_UGC":     1,
		"BIZ_TYPE_PGC":     2,
		"BIZ_TYPE_PUGV":    3,
	}
)

func (x BizType) Enum() *BizType {
	p := new(BizType)
	*p = x
	return p
}

func (x BizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[1].Descriptor()
}

func (BizType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[1]
}

func (x BizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BizType.Descriptor instead.
func (BizType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{1}
}

type ButtonAction int32

const (
	//
	ButtonAction_BUTTON_UNKNOWN ButtonAction = 0
	//
	ButtonAction_PAY ButtonAction = 1
	//
	ButtonAction_VIP ButtonAction = 2
	//
	ButtonAction_PACK ButtonAction = 3
	//
	ButtonAction_LINK ButtonAction = 4
	//
	ButtonAction_COUPON ButtonAction = 5
	//
	ButtonAction_DEMAND ButtonAction = 6
	//
	ButtonAction_DEMAND_PACK ButtonAction = 7
	//
	ButtonAction_FOLLOW ButtonAction = 8
	//
	ButtonAction_APPOINTMENT ButtonAction = 9
	//
	ButtonAction_VIP_FREE ButtonAction = 10
	//
	ButtonAction_TASK ButtonAction = 11
	//
	ButtonAction_CHARGINGPLUS ButtonAction = 12
	//
	ButtonAction_BP ButtonAction = 13
	//
	ButtonAction_PRE_SELL ButtonAction = 14
	//
	ButtonAction_LOGIN ButtonAction = 15
)

// Enum value maps for ButtonAction.
var (
	ButtonAction_name = map[int32]string{
		0:  "BUTTON_UNKNOWN",
		1:  "PAY",
		2:  "VIP",
		3:  "PACK",
		4:  "LINK",
		5:  "COUPON",
		6:  "DEMAND",
		7:  "DEMAND_PACK",
		8:  "FOLLOW",
		9:  "APPOINTMENT",
		10: "VIP_FREE",
		11: "TASK",
		12: "CHARGINGPLUS",
		13: "BP",
		14: "PRE_SELL",
		15: "LOGIN",
	}
	ButtonAction_value = map[string]int32{
		"BUTTON_UNKNOWN": 0,
		"PAY":            1,
		"VIP":            2,
		"PACK":           3,
		"LINK":           4,
		"COUPON":         5,
		"DEMAND":         6,
		"DEMAND_PACK":    7,
		"FOLLOW":         8,
		"APPOINTMENT":    9,
		"VIP_FREE":       10,
		"TASK":           11,
		"CHARGINGPLUS":   12,
		"BP":             13,
		"PRE_SELL":       14,
		"LOGIN":          15,
	}
)

func (x ButtonAction) Enum() *ButtonAction {
	p := new(ButtonAction)
	*p = x
	return p
}

func (x ButtonAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ButtonAction) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[2].Descriptor()
}

func (ButtonAction) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[2]
}

func (x ButtonAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ButtonAction.Descriptor instead.
func (ButtonAction) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{2}
}

// 视频编码
type CodeType int32

const (
	CodeType_NOCODE  CodeType = 0 // 不指定
	CodeType_CODE264 CodeType = 1 // H264
	CodeType_CODE265 CodeType = 2 // H265
	CodeType_CODEAV1 CodeType = 3 // AV1
)

// Enum value maps for CodeType.
var (
	CodeType_name = map[int32]string{
		0: "NOCODE",
		1: "CODE264",
		2: "CODE265",
		3: "CODEAV1",
	}
	CodeType_value = map[string]int32{
		"NOCODE":  0,
		"CODE264": 1,
		"CODE265": 2,
		"CODEAV1": 3,
	}
)

func (x CodeType) Enum() *CodeType {
	p := new(CodeType)
	*p = x
	return p
}

func (x CodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[3].Descriptor()
}

func (CodeType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[3]
}

func (x CodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeType.Descriptor instead.
func (CodeType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{3}
}

// 功能类型
type ConfType int32

const (
	ConfType_NoType         ConfType = 0
	ConfType_FLIPCONF       ConfType = 1
	ConfType_CASTCONF       ConfType = 2
	ConfType_FEEDBACK       ConfType = 3
	ConfType_SUBTITLE       ConfType = 4
	ConfType_PLAYBACKRATE   ConfType = 5
	ConfType_TIMEUP         ConfType = 6
	ConfType_PLAYBACKMODE   ConfType = 7
	ConfType_SCALEMODE      ConfType = 8
	ConfType_BACKGROUNDPLAY ConfType = 9
	ConfType_LIKE           ConfType = 10
	ConfType_DISLIKE        ConfType = 11
	ConfType_COIN           ConfType = 12
	ConfType_ELEC           ConfType = 13
	ConfType_SHARE          ConfType = 14
	ConfType_SCREENSHOT     ConfType = 15
	ConfType_LOCKSCREEN     ConfType = 16
	ConfType_RECOMMEND      ConfType = 17
	ConfType_PLAYBACKSPEED  ConfType = 18
	ConfType_DEFINITION     ConfType = 19
	ConfType_SELECTIONS     ConfType = 20
	ConfType_NEXT           ConfType = 21
	ConfType_EDITDM         ConfType = 22
	ConfType_SMALLWINDOW    ConfType = 23
	ConfType_SHAKE          ConfType = 24
	ConfType_OUTERDM        ConfType = 25
	ConfType_INNERDM        ConfType = 26
	ConfType_PANORAMA       ConfType = 27
	ConfType_DOLBY          ConfType = 28
	ConfType_COLORFILTER    ConfType = 29
	ConfType_LOSSLESS       ConfType = 30
	ConfType_FREYAENTER     ConfType = 31
	ConfType_FREYAFULLENTER ConfType = 32
	ConfType_SKIPOPED       ConfType = 33
	ConfType_RECORDSCREEN   ConfType = 34
	ConfType_DUBBING        ConfType = 35
	ConfType_LISTEN         ConfType = 36
)

// Enum value maps for ConfType.
var (
	ConfType_name = map[int32]string{
		0:  "NoType",
		1:  "FLIPCONF",
		2:  "CASTCONF",
		3:  "FEEDBACK",
		4:  "SUBTITLE",
		5:  "PLAYBACKRATE",
		6:  "TIMEUP",
		7:  "PLAYBACKMODE",
		8:  "SCALEMODE",
		9:  "BACKGROUNDPLAY",
		10: "LIKE",
		11: "DISLIKE",
		12: "COIN",
		13: "ELEC",
		14: "SHARE",
		15: "SCREENSHOT",
		16: "LOCKSCREEN",
		17: "RECOMMEND",
		18: "PLAYBACKSPEED",
		19: "DEFINITION",
		20: "SELECTIONS",
		21: "NEXT",
		22: "EDITDM",
		23: "SMALLWINDOW",
		24: "SHAKE",
		25: "OUTERDM",
		26: "INNERDM",
		27: "PANORAMA",
		28: "DOLBY",
		29: "COLORFILTER",
		30: "LOSSLESS",
		31: "FREYAENTER",
		32: "FREYAFULLENTER",
		33: "SKIPOPED",
		34: "RECORDSCREEN",
		35: "DUBBING",
		36: "LISTEN",
	}
	ConfType_value = map[string]int32{
		"NoType":         0,
		"FLIPCONF":       1,
		"CASTCONF":       2,
		"FEEDBACK":       3,
		"SUBTITLE":       4,
		"PLAYBACKRATE":   5,
		"TIMEUP":         6,
		"PLAYBACKMODE":   7,
		"SCALEMODE":      8,
		"BACKGROUNDPLAY": 9,
		"LIKE":           10,
		"DISLIKE":        11,
		"COIN":           12,
		"ELEC":           13,
		"SHARE":          14,
		"SCREENSHOT":     15,
		"LOCKSCREEN":     16,
		"RECOMMEND":      17,
		"PLAYBACKSPEED":  18,
		"DEFINITION":     19,
		"SELECTIONS":     20,
		"NEXT":           21,
		"EDITDM":         22,
		"SMALLWINDOW":    23,
		"SHAKE":          24,
		"OUTERDM":        25,
		"INNERDM":        26,
		"PANORAMA":       27,
		"DOLBY":          28,
		"COLORFILTER":    29,
		"LOSSLESS":       30,
		"FREYAENTER":     31,
		"FREYAFULLENTER": 32,
		"SKIPOPED":       33,
		"RECORDSCREEN":   34,
		"DUBBING":        35,
		"LISTEN":         36,
	}
)

func (x ConfType) Enum() *ConfType {
	p := new(ConfType)
	*p = x
	return p
}

func (x ConfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[4].Descriptor()
}

func (ConfType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[4]
}

func (x ConfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfType.Descriptor instead.
func (ConfType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{4}
}

// DRM类型
type DrmTechType int32

const (
	//
	DrmTechType_UNKNOWN_DRM DrmTechType = 0
	//
	DrmTechType_FAIR_PLAY DrmTechType = 1
	//
	DrmTechType_WIDE_VINE DrmTechType = 2
	// 哔哩哔哩自研DRM
	DrmTechType_BILI_DRM DrmTechType = 3
)

// Enum value maps for DrmTechType.
var (
	DrmTechType_name = map[int32]string{
		0: "UNKNOWN_DRM",
		1: "FAIR_PLAY",
		2: "WIDE_VINE",
		3: "BILI_DRM",
	}
	DrmTechType_value = map[string]int32{
		"UNKNOWN_DRM": 0,
		"FAIR_PLAY":   1,
		"WIDE_VINE":   2,
		"BILI_DRM":    3,
	}
)

func (x DrmTechType) Enum() *DrmTechType {
	p := new(DrmTechType)
	*p = x
	return p
}

func (x DrmTechType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmTechType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[5].Descriptor()
}

func (DrmTechType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[5]
}

func (x DrmTechType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmTechType.Descriptor instead.
func (DrmTechType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{5}
}

//
type Effects int32

const (
	//
	Effects_EFFECTS_UNKNOWN Effects = 0
	//
	Effects_GAUSSIAN_BLUR Effects = 1
	//
	Effects_HALF_ALPHA Effects = 2
)

// Enum value maps for Effects.
var (
	Effects_name = map[int32]string{
		0: "EFFECTS_UNKNOWN",
		1: "GAUSSIAN_BLUR",
		2: "HALF_ALPHA",
	}
	Effects_value = map[string]int32{
		"EFFECTS_UNKNOWN": 0,
		"GAUSSIAN_BLUR":   1,
		"HALF_ALPHA":      2,
	}
)

func (x Effects) Enum() *Effects {
	p := new(Effects)
	*p = x
	return p
}

func (x Effects) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Effects) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[6].Descriptor()
}

func (Effects) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[6]
}

func (x Effects) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Effects.Descriptor instead.
func (Effects) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{6}
}

type ExtDataType int32

const (
	//
	ExtDataType_EXT_DATA_TYPE_UNKNOWN ExtDataType = 0
	//
	ExtDataType_PLAY_LIST ExtDataType = 1
)

// Enum value maps for ExtDataType.
var (
	ExtDataType_name = map[int32]string{
		0: "EXT_DATA_TYPE_UNKNOWN",
		1: "PLAY_LIST",
	}
	ExtDataType_value = map[string]int32{
		"EXT_DATA_TYPE_UNKNOWN": 0,
		"PLAY_LIST":             1,
	}
)

func (x ExtDataType) Enum() *ExtDataType {
	p := new(ExtDataType)
	*p = x
	return p
}

func (x ExtDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[7].Descriptor()
}

func (ExtDataType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[7]
}

func (x ExtDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtDataType.Descriptor instead.
func (ExtDataType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{7}
}

//
type FragmentPosition int32

const (
	FragmentPosition_INVALID FragmentPosition = 0
	FragmentPosition_PRE     FragmentPosition = 1
	FragmentPosition_MIDDLE  FragmentPosition = 2
	FragmentPosition_POST    FragmentPosition = 3
)

// Enum value maps for FragmentPosition.
var (
	FragmentPosition_name = map[int32]string{
		0: "INVALID",
		1: "PRE",
		2: "MIDDLE",
		3: "POST",
	}
	FragmentPosition_value = map[string]int32{
		"INVALID": 0,
		"PRE":     1,
		"MIDDLE":  2,
		"POST":    3,
	}
)

func (x FragmentPosition) Enum() *FragmentPosition {
	p := new(FragmentPosition)
	*p = x
	return p
}

func (x FragmentPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FragmentPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[8].Descriptor()
}

func (FragmentPosition) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[8]
}

func (x FragmentPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FragmentPosition.Descriptor instead.
func (FragmentPosition) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{8}
}

//
type FragmentType int32

const (
	FragmentType_UNKNOWN      FragmentType = 0
	FragmentType_AD_FRAGMENT  FragmentType = 1
	FragmentType_OGV_FRAGMENT FragmentType = 2
)

// Enum value maps for FragmentType.
var (
	FragmentType_name = map[int32]string{
		0: "UNKNOWN",
		1: "AD_FRAGMENT",
		2: "OGV_FRAGMENT",
	}
	FragmentType_value = map[string]int32{
		"UNKNOWN":      0,
		"AD_FRAGMENT":  1,
		"OGV_FRAGMENT": 2,
	}
)

func (x FragmentType) Enum() *FragmentType {
	p := new(FragmentType)
	*p = x
	return p
}

func (x FragmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FragmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[9].Descriptor()
}

func (FragmentType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[9]
}

func (x FragmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FragmentType.Descriptor instead.
func (FragmentType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{9}
}

//
type GuideStyle int32

const (
	//
	GuideStyle_STYLE_UNKNOWN GuideStyle = 0
	//
	GuideStyle_HORIZONTAL_IMAGE GuideStyle = 1
	//
	GuideStyle_VERTICAL_TEXT GuideStyle = 2
	//
	GuideStyle_SIMPLE_TEXT GuideStyle = 3
	//
	GuideStyle_CHARGING_TEXT GuideStyle = 4
)

// Enum value maps for GuideStyle.
var (
	GuideStyle_name = map[int32]string{
		0: "STYLE_UNKNOWN",
		1: "HORIZONTAL_IMAGE",
		2: "VERTICAL_TEXT",
		3: "SIMPLE_TEXT",
		4: "CHARGING_TEXT",
	}
	GuideStyle_value = map[string]int32{
		"STYLE_UNKNOWN":    0,
		"HORIZONTAL_IMAGE": 1,
		"VERTICAL_TEXT":    2,
		"SIMPLE_TEXT":      3,
		"CHARGING_TEXT":    4,
	}
)

func (x GuideStyle) Enum() *GuideStyle {
	p := new(GuideStyle)
	*p = x
	return p
}

func (x GuideStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[10].Descriptor()
}

func (GuideStyle) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[10]
}

func (x GuideStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuideStyle.Descriptor instead.
func (GuideStyle) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{10}
}

//
type LimitActionType int32

const (
	//
	LimitActionType_LAT_UNKNOWN LimitActionType = 0
	//
	LimitActionType_SHOW_LIMIT_DIALOG LimitActionType = 1
	//
	LimitActionType_SKIP_CURRENT_EP LimitActionType = 2
)

// Enum value maps for LimitActionType.
var (
	LimitActionType_name = map[int32]string{
		0: "LAT_UNKNOWN",
		1: "SHOW_LIMIT_DIALOG",
		2: "SKIP_CURRENT_EP",
	}
	LimitActionType_value = map[string]int32{
		"LAT_UNKNOWN":       0,
		"SHOW_LIMIT_DIALOG": 1,
		"SKIP_CURRENT_EP":   2,
	}
)

func (x LimitActionType) Enum() *LimitActionType {
	p := new(LimitActionType)
	*p = x
	return p
}

func (x LimitActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[11].Descriptor()
}

func (LimitActionType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[11]
}

func (x LimitActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitActionType.Descriptor instead.
func (LimitActionType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{11}
}

// 错误码
type PlayErr int32

const (
	PlayErr_NoErr                   PlayErr = 0 //
	PlayErr_WithMultiDeviceLoginErr PlayErr = 1 // 管控类型的错误码
)

// Enum value maps for PlayErr.
var (
	PlayErr_name = map[int32]string{
		0: "NoErr",
		1: "WithMultiDeviceLoginErr",
	}
	PlayErr_value = map[string]int32{
		"NoErr":                   0,
		"WithMultiDeviceLoginErr": 1,
	}
)

func (x PlayErr) Enum() *PlayErr {
	p := new(PlayErr)
	*p = x
	return p
}

func (x PlayErr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayErr) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[12].Descriptor()
}

func (PlayErr) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[12]
}

func (x PlayErr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayErr.Descriptor instead.
func (PlayErr) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{12}
}

//
type PromptBarStyle int32

const (
	PromptBarStyle_PROMPT_BAR_STYLE_UNKNOWN PromptBarStyle = 0
	PromptBarStyle_TEXT                     PromptBarStyle = 1
	PromptBarStyle_CURING_BENEFITS          PromptBarStyle = 2
	PromptBarStyle_CARD_OPENING_GIFT        PromptBarStyle = 3
	PromptBarStyle_COUNTDOWN                PromptBarStyle = 4
)

// Enum value maps for PromptBarStyle.
var (
	PromptBarStyle_name = map[int32]string{
		0: "PROMPT_BAR_STYLE_UNKNOWN",
		1: "TEXT",
		2: "CURING_BENEFITS",
		3: "CARD_OPENING_GIFT",
		4: "COUNTDOWN",
	}
	PromptBarStyle_value = map[string]int32{
		"PROMPT_BAR_STYLE_UNKNOWN": 0,
		"TEXT":                     1,
		"CURING_BENEFITS":          2,
		"CARD_OPENING_GIFT":        3,
		"COUNTDOWN":                4,
	}
)

func (x PromptBarStyle) Enum() *PromptBarStyle {
	p := new(PromptBarStyle)
	*p = x
	return p
}

func (x PromptBarStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptBarStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[13].Descriptor()
}

func (PromptBarStyle) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[13]
}

func (x PromptBarStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptBarStyle.Descriptor instead.
func (PromptBarStyle) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{13}
}

//
type PromptBarType int32

const (
	PromptBarType_PROMPT_BAR_TYPE_UNKNOWN PromptBarType = 0
	PromptBarType_OPEN_PROMPT_BAR         PromptBarType = 1
)

// Enum value maps for PromptBarType.
var (
	PromptBarType_name = map[int32]string{
		0: "PROMPT_BAR_TYPE_UNKNOWN",
		1: "OPEN_PROMPT_BAR",
	}
	PromptBarType_value = map[string]int32{
		"PROMPT_BAR_TYPE_UNKNOWN": 0,
		"OPEN_PROMPT_BAR":         1,
	}
)

func (x PromptBarType) Enum() *PromptBarType {
	p := new(PromptBarType)
	*p = x
	return p
}

func (x PromptBarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptBarType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[14].Descriptor()
}

func (PromptBarType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[14]
}

func (x PromptBarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptBarType.Descriptor instead.
func (PromptBarType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{14}
}

//
type ShowStyleType int32

const (
	//
	ShowStyleType_SHOW_STYLE_TYPE_UNKNOWN ShowStyleType = 0
	//
	ShowStyleType_SHOW_STYLE_TYPE_ORDINARY ShowStyleType = 1
	//
	ShowStyleType_SHOW_STYLE_TYPE_RESIDENT ShowStyleType = 2
)

// Enum value maps for ShowStyleType.
var (
	ShowStyleType_name = map[int32]string{
		0: "SHOW_STYLE_TYPE_UNKNOWN",
		1: "SHOW_STYLE_TYPE_ORDINARY",
		2: "SHOW_STYLE_TYPE_RESIDENT",
	}
	ShowStyleType_value = map[string]int32{
		"SHOW_STYLE_TYPE_UNKNOWN":  0,
		"SHOW_STYLE_TYPE_ORDINARY": 1,
		"SHOW_STYLE_TYPE_RESIDENT": 2,
	}
)

func (x ShowStyleType) Enum() *ShowStyleType {
	p := new(ShowStyleType)
	*p = x
	return p
}

func (x ShowStyleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowStyleType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[15].Descriptor()
}

func (ShowStyleType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[15]
}

func (x ShowStyleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShowStyleType.Descriptor instead.
func (ShowStyleType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{15}
}

type ToastType int32

const (
	//
	ToastType_TOAST_TYPE_UNKNOWN ToastType = 0
	//
	ToastType_VIP_CONTENT_REMIND ToastType = 1
	//
	ToastType_VIP_DEFINITION_REMIND ToastType = 2
	//
	ToastType_VIP_DEFINITION_GUIDE ToastType = 3
	//
	ToastType_OGV_VIDEO_START_TOAST ToastType = 4
	//
	ToastType_CHARGING_TOAST ToastType = 5
	//
	ToastType_VIP_SKIP_FRAGMENT_TOAST ToastType = 6
)

// Enum value maps for ToastType.
var (
	ToastType_name = map[int32]string{
		0: "TOAST_TYPE_UNKNOWN",
		1: "VIP_CONTENT_REMIND",
		2: "VIP_DEFINITION_REMIND",
		3: "VIP_DEFINITION_GUIDE",
		4: "OGV_VIDEO_START_TOAST",
		5: "CHARGING_TOAST",
		6: "VIP_SKIP_FRAGMENT_TOAST",
	}
	ToastType_value = map[string]int32{
		"TOAST_TYPE_UNKNOWN":      0,
		"VIP_CONTENT_REMIND":      1,
		"VIP_DEFINITION_REMIND":   2,
		"VIP_DEFINITION_GUIDE":    3,
		"OGV_VIDEO_START_TOAST":   4,
		"CHARGING_TOAST":          5,
		"VIP_SKIP_FRAGMENT_TOAST": 6,
	}
)

func (x ToastType) Enum() *ToastType {
	p := new(ToastType)
	*p = x
	return p
}

func (x ToastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToastType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[16].Descriptor()
}

func (ToastType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[16]
}

func (x ToastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToastType.Descriptor instead.
func (ToastType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{16}
}

//
type UnsupportScene int32

const (
	//
	UnsupportScene_UNKNOWN_SCENE UnsupportScene = 0
	//
	UnsupportScene_PREMIERE UnsupportScene = 1
)

// Enum value maps for UnsupportScene.
var (
	UnsupportScene_name = map[int32]string{
		0: "UNKNOWN_SCENE",
		1: "PREMIERE",
	}
	UnsupportScene_value = map[string]int32{
		"UNKNOWN_SCENE": 0,
		"PREMIERE":      1,
	}
)

func (x UnsupportScene) Enum() *UnsupportScene {
	p := new(UnsupportScene)
	*p = x
	return p
}

func (x UnsupportScene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnsupportScene) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[17].Descriptor()
}

func (UnsupportScene) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[17]
}

func (x UnsupportScene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnsupportScene.Descriptor instead.
func (UnsupportScene) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{17}
}

// 杜比类型
type DolbyItem_Type int32

const (
	DolbyItem_NONE   DolbyItem_Type = 0 // NONE
	DolbyItem_COMMON DolbyItem_Type = 1 // 普通杜比音效
	DolbyItem_ATMOS  DolbyItem_Type = 2 // 全景杜比音效
)

// Enum value maps for DolbyItem_Type.
var (
	DolbyItem_Type_name = map[int32]string{
		0: "NONE",
		1: "COMMON",
		2: "ATMOS",
	}
	DolbyItem_Type_value = map[string]int32{
		"NONE":   0,
		"COMMON": 1,
		"ATMOS":  2,
	}
)

func (x DolbyItem_Type) Enum() *DolbyItem_Type {
	p := new(DolbyItem_Type)
	*p = x
	return p
}

func (x DolbyItem_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DolbyItem_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[18].Descriptor()
}

func (DolbyItem_Type) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[18]
}

func (x DolbyItem_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DolbyItem_Type.Descriptor instead.
func (DolbyItem_Type) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{15, 0}
}

type Scheme_ActionType int32

const (
	Scheme_UNKNOWN    Scheme_ActionType = 0
	Scheme_SHOW_TOAST Scheme_ActionType = 1
)

// Enum value maps for Scheme_ActionType.
var (
	Scheme_ActionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SHOW_TOAST",
	}
	Scheme_ActionType_value = map[string]int32{
		"UNKNOWN":    0,
		"SHOW_TOAST": 1,
	}
)

func (x Scheme_ActionType) Enum() *Scheme_ActionType {
	p := new(Scheme_ActionType)
	*p = x
	return p
}

func (x Scheme_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scheme_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_bilibili_playershared_playershared_proto_enumTypes[19].Descriptor()
}

func (Scheme_ActionType) Type() protoreflect.EnumType {
	return &file_bilibili_playershared_playershared_proto_enumTypes[19]
}

func (x Scheme_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scheme_ActionType.Descriptor instead.
func (Scheme_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{42, 0}
}

// ArcConf消息
type ArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否支持
	IsSupport bool `protobuf:"varint,1,opt,name=is_support,json=isSupport,proto3" json:"is_support,omitempty"`
	// 是否禁用
	Disabled bool `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// 额外内容
	ExtraContent *ExtraContent `protobuf:"bytes,3,opt,name=extra_content,json=extraContent,proto3" json:"extra_content,omitempty"`
	// 不支持场景列表
	UnsupportScene []int32 `protobuf:"varint,4,rep,packed,name=unsupport_scene,json=unsupportScene,proto3" json:"unsupport_scene,omitempty"`
}

func (x *ArcConf) Reset() {
	*x = ArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArcConf) ProtoMessage() {}

func (x *ArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArcConf.ProtoReflect.Descriptor instead.
func (*ArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{0}
}

func (x *ArcConf) GetIsSupport() bool {
	if x != nil {
		return x.IsSupport
	}
	return false
}

func (x *ArcConf) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ArcConf) GetExtraContent() *ExtraContent {
	if x != nil {
		return x.ExtraContent
	}
	return nil
}

func (x *ArcConf) GetUnsupportScene() []int32 {
	if x != nil {
		return x.UnsupportScene
	}
	return nil
}

//
type BackgroundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DrawableColor string `protobuf:"bytes,1,opt,name=drawable_color,json=drawableColor,proto3" json:"drawable_color,omitempty"`
	//
	DrawableBitmapUrl string `protobuf:"bytes,2,opt,name=drawable_bitmap_url,json=drawableBitmapUrl,proto3" json:"drawable_bitmap_url,omitempty"`
	//
	Effects int32 `protobuf:"varint,3,opt,name=effects,proto3" json:"effects,omitempty"`
}

func (x *BackgroundInfo) Reset() {
	*x = BackgroundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundInfo) ProtoMessage() {}

func (x *BackgroundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundInfo.ProtoReflect.Descriptor instead.
func (*BackgroundInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{1}
}

func (x *BackgroundInfo) GetDrawableColor() string {
	if x != nil {
		return x.DrawableColor
	}
	return ""
}

func (x *BackgroundInfo) GetDrawableBitmapUrl() string {
	if x != nil {
		return x.DrawableBitmapUrl
	}
	return ""
}

func (x *BackgroundInfo) GetEffects() int32 {
	if x != nil {
		return x.Effects
	}
	return 0
}

//
type BadgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	//
	BgColor string `protobuf:"bytes,2,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	//
	BgColorNight string `protobuf:"bytes,3,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	//
	TextColor string `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	//
	BgGradientColor *GradientColor `protobuf:"bytes,5,opt,name=bg_gradient_color,json=bgGradientColor,proto3" json:"bg_gradient_color,omitempty"`
	//
	Img string `protobuf:"bytes,6,opt,name=img,proto3" json:"img,omitempty"`
}

func (x *BadgeInfo) Reset() {
	*x = BadgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeInfo) ProtoMessage() {}

func (x *BadgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeInfo.ProtoReflect.Descriptor instead.
func (*BadgeInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{2}
}

func (x *BadgeInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BadgeInfo) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *BadgeInfo) GetBgColorNight() string {
	if x != nil {
		return x.BgColorNight
	}
	return ""
}

func (x *BadgeInfo) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *BadgeInfo) GetBgGradientColor() *GradientColor {
	if x != nil {
		return x.BgGradientColor
	}
	return nil
}

func (x *BadgeInfo) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

//
type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	JumpLink string `protobuf:"bytes,1,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
	//
	ImageLink string `protobuf:"bytes,2,opt,name=image_link,json=imageLink,proto3" json:"image_link,omitempty"`
	//
	HalfImageLink string `protobuf:"bytes,3,opt,name=half_image_link,json=halfImageLink,proto3" json:"half_image_link,omitempty"`
	//
	Report *Report `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{3}
}

func (x *Banner) GetJumpLink() string {
	if x != nil {
		return x.JumpLink
	}
	return ""
}

func (x *Banner) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *Banner) GetHalfImageLink() string {
	if x != nil {
		return x.HalfImageLink
	}
	return ""
}

func (x *Banner) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

//
type BenefitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *BenefitInfo) Reset() {
	*x = BenefitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenefitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenefitInfo) ProtoMessage() {}

func (x *BenefitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenefitInfo.ProtoReflect.Descriptor instead.
func (*BenefitInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{4}
}

func (x *BenefitInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BenefitInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

//
type BottomDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Title *TextInfo `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *BottomDisplay) Reset() {
	*x = BottomDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottomDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottomDisplay) ProtoMessage() {}

func (x *BottomDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottomDisplay.ProtoReflect.Descriptor instead.
func (*BottomDisplay) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{5}
}

func (x *BottomDisplay) GetTitle() *TextInfo {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *BottomDisplay) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// 按钮组件
type Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 按钮文本
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 按钮跳转链接
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	// 埋点上报相关
	ReportParams map[string]string `protobuf:"bytes,3,rep,name=report_params,json=reportParams,proto3" json:"report_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Button) Reset() {
	*x = Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Button) ProtoMessage() {}

func (x *Button) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Button.ProtoReflect.Descriptor instead.
func (*Button) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{6}
}

func (x *Button) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Button) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Button) GetReportParams() map[string]string {
	if x != nil {
		return x.ReportParams
	}
	return nil
}

//
type ButtonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	//
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	//
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	//
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	//
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	//
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	//
	ActionType ButtonAction `protobuf:"varint,7,opt,name=action_type,json=actionType,proto3,enum=bilibili.playershared.ButtonAction" json:"action_type,omitempty"`
	//
	BadgeInfo *BadgeInfo `protobuf:"bytes,8,opt,name=badge_info,json=badgeInfo,proto3" json:"badge_info,omitempty"`
	//
	Report *Report `protobuf:"bytes,9,opt,name=report,proto3" json:"report,omitempty"`
	//
	LeftStrikethroughText string `protobuf:"bytes,10,opt,name=left_strikethrough_text,json=leftStrikethroughText,proto3" json:"left_strikethrough_text,omitempty"`
	//
	SimpleTextInfo *TextInfo `protobuf:"bytes,11,opt,name=simple_text_info,json=simpleTextInfo,proto3" json:"simple_text_info,omitempty"`
	//
	SimpleBgColor string `protobuf:"bytes,12,opt,name=simple_bg_color,json=simpleBgColor,proto3" json:"simple_bg_color,omitempty"`
	//
	SimpleBgColorNight string `protobuf:"bytes,13,opt,name=simple_bg_color_night,json=simpleBgColorNight,proto3" json:"simple_bg_color_night,omitempty"`
	//
	BgGradientColor *GradientColor `protobuf:"bytes,14,opt,name=bg_gradient_color,json=bgGradientColor,proto3" json:"bg_gradient_color,omitempty"`
	//
	OrderReportParams map[string]string `protobuf:"bytes,15,rep,name=order_report_params,json=orderReportParams,proto3" json:"order_report_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	TaskParam *TaskParam `protobuf:"bytes,16,opt,name=task_param,json=taskParam,proto3" json:"task_param,omitempty"`
	//
	FrameColor string `protobuf:"bytes,17,opt,name=frame_color,json=frameColor,proto3" json:"frame_color,omitempty"`
	//
	Icon string `protobuf:"bytes,18,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ButtonInfo) Reset() {
	*x = ButtonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonInfo) ProtoMessage() {}

func (x *ButtonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonInfo.ProtoReflect.Descriptor instead.
func (*ButtonInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{7}
}

func (x *ButtonInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ButtonInfo) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *ButtonInfo) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

func (x *ButtonInfo) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *ButtonInfo) GetBgColorNight() string {
	if x != nil {
		return x.BgColorNight
	}
	return ""
}

func (x *ButtonInfo) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ButtonInfo) GetActionType() ButtonAction {
	if x != nil {
		return x.ActionType
	}
	return ButtonAction_BUTTON_UNKNOWN
}

func (x *ButtonInfo) GetBadgeInfo() *BadgeInfo {
	if x != nil {
		return x.BadgeInfo
	}
	return nil
}

func (x *ButtonInfo) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ButtonInfo) GetLeftStrikethroughText() string {
	if x != nil {
		return x.LeftStrikethroughText
	}
	return ""
}

func (x *ButtonInfo) GetSimpleTextInfo() *TextInfo {
	if x != nil {
		return x.SimpleTextInfo
	}
	return nil
}

func (x *ButtonInfo) GetSimpleBgColor() string {
	if x != nil {
		return x.SimpleBgColor
	}
	return ""
}

func (x *ButtonInfo) GetSimpleBgColorNight() string {
	if x != nil {
		return x.SimpleBgColorNight
	}
	return ""
}

func (x *ButtonInfo) GetBgGradientColor() *GradientColor {
	if x != nil {
		return x.BgGradientColor
	}
	return nil
}

func (x *ButtonInfo) GetOrderReportParams() map[string]string {
	if x != nil {
		return x.OrderReportParams
	}
	return nil
}

func (x *ButtonInfo) GetTaskParam() *TaskParam {
	if x != nil {
		return x.TaskParam
	}
	return nil
}

func (x *ButtonInfo) GetFrameColor() string {
	if x != nil {
		return x.FrameColor
	}
	return ""
}

func (x *ButtonInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

//
type ComprehensiveToast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	//
	Button *ButtonInfo `protobuf:"bytes,2,opt,name=button,proto3" json:"button,omitempty"`
	//
	ShowStyleType int32 `protobuf:"varint,3,opt,name=show_style_type,json=showStyleType,proto3" json:"show_style_type,omitempty"`
	//
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	//
	ToastText *TextInfo `protobuf:"bytes,5,opt,name=toast_text,json=toastText,proto3" json:"toast_text,omitempty"`
	//
	Report *Report `protobuf:"bytes,6,opt,name=report,proto3" json:"report,omitempty"`
	//
	OrderReportParams map[string]string `protobuf:"bytes,7,rep,name=order_report_params,json=orderReportParams,proto3" json:"order_report_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComprehensiveToast) Reset() {
	*x = ComprehensiveToast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComprehensiveToast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComprehensiveToast) ProtoMessage() {}

func (x *ComprehensiveToast) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComprehensiveToast.ProtoReflect.Descriptor instead.
func (*ComprehensiveToast) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{8}
}

func (x *ComprehensiveToast) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ComprehensiveToast) GetButton() *ButtonInfo {
	if x != nil {
		return x.Button
	}
	return nil
}

func (x *ComprehensiveToast) GetShowStyleType() int32 {
	if x != nil {
		return x.ShowStyleType
	}
	return 0
}

func (x *ComprehensiveToast) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ComprehensiveToast) GetToastText() *TextInfo {
	if x != nil {
		return x.ToastText
	}
	return nil
}

func (x *ComprehensiveToast) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ComprehensiveToast) GetOrderReportParams() map[string]string {
	if x != nil {
		return x.OrderReportParams
	}
	return nil
}

//
type ConfValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConfValue_SwitchVal
	//	*ConfValue_SelectedVal
	Value isConfValue_Value `protobuf_oneof:"value"`
}

func (x *ConfValue) Reset() {
	*x = ConfValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfValue) ProtoMessage() {}

func (x *ConfValue) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfValue.ProtoReflect.Descriptor instead.
func (*ConfValue) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{9}
}

func (m *ConfValue) GetValue() isConfValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConfValue) GetSwitchVal() int32 {
	if x, ok := x.GetValue().(*ConfValue_SwitchVal); ok {
		return x.SwitchVal
	}
	return 0
}

func (x *ConfValue) GetSelectedVal() int32 {
	if x, ok := x.GetValue().(*ConfValue_SelectedVal); ok {
		return x.SelectedVal
	}
	return 0
}

type isConfValue_Value interface {
	isConfValue_Value()
}

type ConfValue_SwitchVal struct {
	//
	SwitchVal int32 `protobuf:"varint,1,opt,name=switch_val,json=switchVal,proto3,oneof"`
}

type ConfValue_SelectedVal struct {
	//
	SelectedVal int32 `protobuf:"varint,2,opt,name=selected_val,json=selectedVal,proto3,oneof"`
}

func (*ConfValue_SwitchVal) isConfValue_Value() {}

func (*ConfValue_SelectedVal) isConfValue_Value() {}

// Dash条目
type DashItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 主线流
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,3,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,5,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// 帧率
	FrameRate string `protobuf:"bytes,8,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// DRM密钥
	WidevinePssh string `protobuf:"bytes,9,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashItem) Reset() {
	*x = DashItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashItem) ProtoMessage() {}

func (x *DashItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashItem.ProtoReflect.Descriptor instead.
func (*DashItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{10}
}

func (x *DashItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DashItem) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashItem) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashItem) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashItem) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashItem) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashItem) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashItem) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashItem) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

// 视频流信息: dash流
type DashVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主线流
	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,2,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// 带宽
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// 编码id
	Codecid uint32 `protobuf:"varint,4,opt,name=codecid,proto3" json:"codecid,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,5,opt,name=md5,proto3" json:"md5,omitempty"`
	// 大小
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// 伴音质量id
	AudioId uint32 `protobuf:"varint,7,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,8,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 帧率
	FrameRate string `protobuf:"bytes,9,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// 宽
	Width int32 `protobuf:"varint,10,opt,name=width,proto3" json:"width,omitempty"`
	// 高
	Height int32 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	// DRM密钥
	WidevinePssh string `protobuf:"bytes,12,opt,name=widevine_pssh,json=widevinePssh,proto3" json:"widevine_pssh,omitempty"`
}

func (x *DashVideo) Reset() {
	*x = DashVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DashVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DashVideo) ProtoMessage() {}

func (x *DashVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DashVideo.ProtoReflect.Descriptor instead.
func (*DashVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{11}
}

func (x *DashVideo) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *DashVideo) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *DashVideo) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *DashVideo) GetCodecid() uint32 {
	if x != nil {
		return x.Codecid
	}
	return 0
}

func (x *DashVideo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *DashVideo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DashVideo) GetAudioId() uint32 {
	if x != nil {
		return x.AudioId
	}
	return 0
}

func (x *DashVideo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *DashVideo) GetFrameRate() string {
	if x != nil {
		return x.FrameRate
	}
	return ""
}

func (x *DashVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DashVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DashVideo) GetWidevinePssh() string {
	if x != nil {
		return x.WidevinePssh
	}
	return ""
}

//
type DeviceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfValue *ConfValue `protobuf:"bytes,1,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
}

func (x *DeviceConf) Reset() {
	*x = DeviceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConf) ProtoMessage() {}

func (x *DeviceConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConf.ProtoReflect.Descriptor instead.
func (*DeviceConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceConf) GetConfValue() *ConfValue {
	if x != nil {
		return x.ConfValue
	}
	return nil
}

//
type Dialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	StyleType GuideStyle `protobuf:"varint,1,opt,name=style_type,json=styleType,proto3,enum=bilibili.playershared.GuideStyle" json:"style_type,omitempty"`
	//
	BackgroundInfo *BackgroundInfo `protobuf:"bytes,2,opt,name=background_info,json=backgroundInfo,proto3" json:"background_info,omitempty"`
	//
	Title *TextInfo `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//
	Subtitle *TextInfo `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	//
	Image *ImageInfo `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	//
	Button []*ButtonInfo `protobuf:"bytes,6,rep,name=button,proto3" json:"button,omitempty"`
	//
	BottomDesc *ButtonInfo `protobuf:"bytes,7,opt,name=bottom_desc,json=bottomDesc,proto3" json:"bottom_desc,omitempty"`
	//
	Report *Report `protobuf:"bytes,8,opt,name=report,proto3" json:"report,omitempty"`
	//
	CountDownSec int32 `protobuf:"varint,9,opt,name=count_down_sec,json=countDownSec,proto3" json:"count_down_sec,omitempty"`
	//
	RightBottomDesc *TextInfo `protobuf:"bytes,10,opt,name=right_bottom_desc,json=rightBottomDesc,proto3" json:"right_bottom_desc,omitempty"`
	//
	BottomDisplay []*BottomDisplay `protobuf:"bytes,11,rep,name=bottom_display,json=bottomDisplay,proto3" json:"bottom_display,omitempty"`
	//
	ExtData *ExtData `protobuf:"bytes,12,opt,name=ext_data,json=extData,proto3" json:"ext_data,omitempty"`
	//
	LimitActionType LimitActionType `protobuf:"varint,13,opt,name=limit_action_type,json=limitActionType,proto3,enum=bilibili.playershared.LimitActionType" json:"limit_action_type,omitempty"`
	//
	IsHideMoreBtn int32 `protobuf:"varint,14,opt,name=is_hide_more_btn,json=isHideMoreBtn,proto3" json:"is_hide_more_btn,omitempty"`
}

func (x *Dialog) Reset() {
	*x = Dialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dialog) ProtoMessage() {}

func (x *Dialog) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dialog.ProtoReflect.Descriptor instead.
func (*Dialog) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{13}
}

func (x *Dialog) GetStyleType() GuideStyle {
	if x != nil {
		return x.StyleType
	}
	return GuideStyle_STYLE_UNKNOWN
}

func (x *Dialog) GetBackgroundInfo() *BackgroundInfo {
	if x != nil {
		return x.BackgroundInfo
	}
	return nil
}

func (x *Dialog) GetTitle() *TextInfo {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Dialog) GetSubtitle() *TextInfo {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *Dialog) GetImage() *ImageInfo {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Dialog) GetButton() []*ButtonInfo {
	if x != nil {
		return x.Button
	}
	return nil
}

func (x *Dialog) GetBottomDesc() *ButtonInfo {
	if x != nil {
		return x.BottomDesc
	}
	return nil
}

func (x *Dialog) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Dialog) GetCountDownSec() int32 {
	if x != nil {
		return x.CountDownSec
	}
	return 0
}

func (x *Dialog) GetRightBottomDesc() *TextInfo {
	if x != nil {
		return x.RightBottomDesc
	}
	return nil
}

func (x *Dialog) GetBottomDisplay() []*BottomDisplay {
	if x != nil {
		return x.BottomDisplay
	}
	return nil
}

func (x *Dialog) GetExtData() *ExtData {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *Dialog) GetLimitActionType() LimitActionType {
	if x != nil {
		return x.LimitActionType
	}
	return LimitActionType_LAT_UNKNOWN
}

func (x *Dialog) GetIsHideMoreBtn() int32 {
	if x != nil {
		return x.IsHideMoreBtn
	}
	return 0
}

// 当前分辨率信息
type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 宽
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// 长
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// 旋转角度
	Rotate int32 `protobuf:"varint,3,opt,name=rotate,proto3" json:"rotate,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{14}
}

func (x *Dimension) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Dimension) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Dimension) GetRotate() int32 {
	if x != nil {
		return x.Rotate
	}
	return 0
}

// 杜比伴音流信息
type DolbyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 杜比类型
	Type DolbyItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.playershared.DolbyItem_Type" json:"type,omitempty"`
	// 音频流
	Audio []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *DolbyItem) Reset() {
	*x = DolbyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DolbyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DolbyItem) ProtoMessage() {}

func (x *DolbyItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DolbyItem.ProtoReflect.Descriptor instead.
func (*DolbyItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{15}
}

func (x *DolbyItem) GetType() DolbyItem_Type {
	if x != nil {
		return x.Type
	}
	return DolbyItem_NONE
}

func (x *DolbyItem) GetAudio() []*DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

//
type EpInlineVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	MaterialNo int64 `protobuf:"varint,1,opt,name=material_no,json=materialNo,proto3" json:"material_no,omitempty"`
	//
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	//
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *EpInlineVideo) Reset() {
	*x = EpInlineVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpInlineVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpInlineVideo) ProtoMessage() {}

func (x *EpInlineVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpInlineVideo.ProtoReflect.Descriptor instead.
func (*EpInlineVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{16}
}

func (x *EpInlineVideo) GetMaterialNo() int64 {
	if x != nil {
		return x.MaterialNo
	}
	return 0
}

func (x *EpInlineVideo) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *EpInlineVideo) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

//
type EpInlineVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	EpInlineVideo []*EpInlineVideo `protobuf:"bytes,1,rep,name=ep_inline_video,json=epInlineVideo,proto3" json:"ep_inline_video,omitempty"`
}

func (x *EpInlineVideoInfo) Reset() {
	*x = EpInlineVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpInlineVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpInlineVideoInfo) ProtoMessage() {}

func (x *EpInlineVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpInlineVideoInfo.ProtoReflect.Descriptor instead.
func (*EpInlineVideoInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{17}
}

func (x *EpInlineVideoInfo) GetEpInlineVideo() []*EpInlineVideo {
	if x != nil {
		return x.EpInlineVideo
	}
	return nil
}

// 事件
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 震动
	Shake *Shake `protobuf:"bytes,1,opt,name=shake,proto3" json:"shake,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{18}
}

func (x *Event) GetShake() *Shake {
	if x != nil {
		return x.Shake
	}
	return nil
}

//
type ExtData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Type ExtDataType `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.playershared.ExtDataType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ExtData_PlayListInfo
	Data isExtData_Data `protobuf_oneof:"data"`
}

func (x *ExtData) Reset() {
	*x = ExtData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtData) ProtoMessage() {}

func (x *ExtData) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtData.ProtoReflect.Descriptor instead.
func (*ExtData) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{19}
}

func (x *ExtData) GetType() ExtDataType {
	if x != nil {
		return x.Type
	}
	return ExtDataType_EXT_DATA_TYPE_UNKNOWN
}

func (m *ExtData) GetData() isExtData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ExtData) GetPlayListInfo() *PlayListInfo {
	if x, ok := x.GetData().(*ExtData_PlayListInfo); ok {
		return x.PlayListInfo
	}
	return nil
}

type isExtData_Data interface {
	isExtData_Data()
}

type ExtData_PlayListInfo struct {
	PlayListInfo *PlayListInfo `protobuf:"bytes,2,opt,name=play_list_info,json=playListInfo,proto3,oneof"`
}

func (*ExtData_PlayListInfo) isExtData_Data() {}

// ? 错误码补充信息
type ExtraContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DisableReason string `protobuf:"bytes,1,opt,name=disable_reason,json=disableReason,proto3" json:"disable_reason,omitempty"`
	//
	DisableCode int64 `protobuf:"varint,2,opt,name=disable_code,json=disableCode,proto3" json:"disable_code,omitempty"`
}

func (x *ExtraContent) Reset() {
	*x = ExtraContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraContent) ProtoMessage() {}

func (x *ExtraContent) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraContent.ProtoReflect.Descriptor instead.
func (*ExtraContent) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{20}
}

func (x *ExtraContent) GetDisableReason() string {
	if x != nil {
		return x.DisableReason
	}
	return ""
}

func (x *ExtraContent) GetDisableCode() int64 {
	if x != nil {
		return x.DisableCode
	}
	return 0
}

//
type Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Infos []*FragmentInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *Fragment) Reset() {
	*x = Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fragment) ProtoMessage() {}

func (x *Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fragment.ProtoReflect.Descriptor instead.
func (*Fragment) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{21}
}

func (x *Fragment) GetInfos() []*FragmentInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

//
type FragmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	//
	FragmentPosition FragmentPosition `protobuf:"varint,2,opt,name=fragment_position,json=fragmentPosition,proto3,enum=bilibili.playershared.FragmentPosition" json:"fragment_position,omitempty"`
	//
	FragmentType FragmentType `protobuf:"varint,3,opt,name=fragment_type,json=fragmentType,proto3,enum=bilibili.playershared.FragmentType" json:"fragment_type,omitempty"`
	//
	Aid int64 `protobuf:"varint,4,opt,name=aid,proto3" json:"aid,omitempty"`
	//
	Cid int64 `protobuf:"varint,5,opt,name=cid,proto3" json:"cid,omitempty"`
	//
	StartTime int64 `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//
	Report *anypb.Any `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *FragmentInfo) Reset() {
	*x = FragmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentInfo) ProtoMessage() {}

func (x *FragmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentInfo.ProtoReflect.Descriptor instead.
func (*FragmentInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{22}
}

func (x *FragmentInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FragmentInfo) GetFragmentPosition() FragmentPosition {
	if x != nil {
		return x.FragmentPosition
	}
	return FragmentPosition_INVALID
}

func (x *FragmentInfo) GetFragmentType() FragmentType {
	if x != nil {
		return x.FragmentType
	}
	return FragmentType_UNKNOWN
}

func (x *FragmentInfo) GetAid() int64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *FragmentInfo) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *FragmentInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FragmentInfo) GetReport() *anypb.Any {
	if x != nil {
		return x.Report
	}
	return nil
}

//
type FragmentVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Videos []*FragmentVideoInfo `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
}

func (x *FragmentVideo) Reset() {
	*x = FragmentVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentVideo) ProtoMessage() {}

func (x *FragmentVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentVideo.ProtoReflect.Descriptor instead.
func (*FragmentVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{23}
}

func (x *FragmentVideo) GetVideos() []*FragmentVideoInfo {
	if x != nil {
		return x.Videos
	}
	return nil
}

//
type FragmentVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	FragmentInfo *FragmentInfo `protobuf:"bytes,1,opt,name=fragment_info,json=fragmentInfo,proto3" json:"fragment_info,omitempty"`
	//
	VodInfo *VodInfo `protobuf:"bytes,2,opt,name=vod_info,json=vodInfo,proto3" json:"vod_info,omitempty"`
	//
	PlayArcConf *PlayArcConf `protobuf:"bytes,3,opt,name=play_arc_conf,json=playArcConf,proto3" json:"play_arc_conf,omitempty"`
	//
	Dimension *Dimension `protobuf:"bytes,4,opt,name=dimension,proto3" json:"dimension,omitempty"`
	//
	Timelength int64 `protobuf:"varint,5,opt,name=timelength,proto3" json:"timelength,omitempty"`
	//
	VideoType BizType `protobuf:"varint,6,opt,name=video_type,json=videoType,proto3,enum=bilibili.playershared.BizType" json:"video_type,omitempty"`
	//
	PlayableStatus bool `protobuf:"varint,7,opt,name=playable_status,json=playableStatus,proto3" json:"playable_status,omitempty"`
}

func (x *FragmentVideoInfo) Reset() {
	*x = FragmentVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentVideoInfo) ProtoMessage() {}

func (x *FragmentVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentVideoInfo.ProtoReflect.Descriptor instead.
func (*FragmentVideoInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{24}
}

func (x *FragmentVideoInfo) GetFragmentInfo() *FragmentInfo {
	if x != nil {
		return x.FragmentInfo
	}
	return nil
}

func (x *FragmentVideoInfo) GetVodInfo() *VodInfo {
	if x != nil {
		return x.VodInfo
	}
	return nil
}

func (x *FragmentVideoInfo) GetPlayArcConf() *PlayArcConf {
	if x != nil {
		return x.PlayArcConf
	}
	return nil
}

func (x *FragmentVideoInfo) GetDimension() *Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *FragmentVideoInfo) GetTimelength() int64 {
	if x != nil {
		return x.Timelength
	}
	return 0
}

func (x *FragmentVideoInfo) GetVideoType() BizType {
	if x != nil {
		return x.VideoType
	}
	return BizType_BIZ_TYPE_UNKNOWN
}

func (x *FragmentVideoInfo) GetPlayableStatus() bool {
	if x != nil {
		return x.PlayableStatus
	}
	return false
}

//
type GradientColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	StartColor string `protobuf:"bytes,1,opt,name=start_color,json=startColor,proto3" json:"start_color,omitempty"`
	//
	EndColor string `protobuf:"bytes,2,opt,name=end_color,json=endColor,proto3" json:"end_color,omitempty"`
}

func (x *GradientColor) Reset() {
	*x = GradientColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientColor) ProtoMessage() {}

func (x *GradientColor) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientColor.ProtoReflect.Descriptor instead.
func (*GradientColor) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{25}
}

func (x *GradientColor) GetStartColor() string {
	if x != nil {
		return x.StartColor
	}
	return ""
}

func (x *GradientColor) GetEndColor() string {
	if x != nil {
		return x.EndColor
	}
	return ""
}

// 播放历史
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	CurrentVideo *HistoryInfo `protobuf:"bytes,1,opt,name=current_video,json=currentVideo,proto3" json:"current_video,omitempty"`
	//
	RelatedVideo *HistoryInfo `protobuf:"bytes,2,opt,name=related_video,json=relatedVideo,proto3" json:"related_video,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{26}
}

func (x *History) GetCurrentVideo() *HistoryInfo {
	if x != nil {
		return x.CurrentVideo
	}
	return nil
}

func (x *History) GetRelatedVideo() *HistoryInfo {
	if x != nil {
		return x.RelatedVideo
	}
	return nil
}

//
type HistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Progress int64 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	//
	LastPlayCid int64 `protobuf:"varint,2,opt,name=last_play_cid,json=lastPlayCid,proto3" json:"last_play_cid,omitempty"`
	//
	Toast *Toast `protobuf:"bytes,3,opt,name=toast,proto3" json:"toast,omitempty"`
	//
	ToastWithoutTime *Toast `protobuf:"bytes,4,opt,name=toast_without_time,json=toastWithoutTime,proto3" json:"toast_without_time,omitempty"`
	//
	LastPlayAid int64 `protobuf:"varint,5,opt,name=last_play_aid,json=lastPlayAid,proto3" json:"last_play_aid,omitempty"`
}

func (x *HistoryInfo) Reset() {
	*x = HistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryInfo) ProtoMessage() {}

func (x *HistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryInfo.ProtoReflect.Descriptor instead.
func (*HistoryInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{27}
}

func (x *HistoryInfo) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *HistoryInfo) GetLastPlayCid() int64 {
	if x != nil {
		return x.LastPlayCid
	}
	return 0
}

func (x *HistoryInfo) GetToast() *Toast {
	if x != nil {
		return x.Toast
	}
	return nil
}

func (x *HistoryInfo) GetToastWithoutTime() *Toast {
	if x != nil {
		return x.ToastWithoutTime
	}
	return nil
}

func (x *HistoryInfo) GetLastPlayAid() int64 {
	if x != nil {
		return x.LastPlayAid
	}
	return 0
}

//
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{28}
}

func (x *ImageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//
type Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	HistoryNode *Node `protobuf:"bytes,1,opt,name=history_node,json=historyNode,proto3" json:"history_node,omitempty"`
	//
	GraphVersion int64 `protobuf:"varint,2,opt,name=graph_version,json=graphVersion,proto3" json:"graph_version,omitempty"`
	//
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	//
	Mark int64 `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (x *Interaction) Reset() {
	*x = Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interaction) ProtoMessage() {}

func (x *Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interaction.ProtoReflect.Descriptor instead.
func (*Interaction) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{29}
}

func (x *Interaction) GetHistoryNode() *Node {
	if x != nil {
		return x.HistoryNode
	}
	return nil
}

func (x *Interaction) GetGraphVersion() int64 {
	if x != nil {
		return x.GraphVersion
	}
	return 0
}

func (x *Interaction) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Interaction) GetMark() int64 {
	if x != nil {
		return x.Mark
	}
	return 0
}

// HIRES伴音流信息
type LossLessItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否为hires
	IsLosslessAudio bool `protobuf:"varint,1,opt,name=is_lossless_audio,json=isLosslessAudio,proto3" json:"is_lossless_audio,omitempty"`
	// 音频流信息
	Audio *DashItem `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	// 是否需要大会员
	NeedVip bool `protobuf:"varint,3,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
}

func (x *LossLessItem) Reset() {
	*x = LossLessItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossLessItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossLessItem) ProtoMessage() {}

func (x *LossLessItem) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossLessItem.ProtoReflect.Descriptor instead.
func (*LossLessItem) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{30}
}

func (x *LossLessItem) GetIsLosslessAudio() bool {
	if x != nil {
		return x.IsLosslessAudio
	}
	return false
}

func (x *LossLessItem) GetAudio() *DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *LossLessItem) GetNeedVip() bool {
	if x != nil {
		return x.NeedVip
	}
	return false
}

//
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	//
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{31}
}

func (x *Node) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *Node) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Node) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

//
type PlayArc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	VideoType BizType `protobuf:"varint,1,opt,name=video_type,json=videoType,proto3,enum=bilibili.playershared.BizType" json:"video_type,omitempty"`
	//
	Aid uint64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	//
	Cid uint64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`
	//
	DrmTechType DrmTechType `protobuf:"varint,4,opt,name=drm_tech_type,json=drmTechType,proto3,enum=bilibili.playershared.DrmTechType" json:"drm_tech_type,omitempty"`
	//
	ArcType ArcType `protobuf:"varint,5,opt,name=arc_type,json=arcType,proto3,enum=bilibili.playershared.ArcType" json:"arc_type,omitempty"`
	//
	Interaction *Interaction `protobuf:"bytes,6,opt,name=interaction,proto3" json:"interaction,omitempty"`
	//
	Dimension *Dimension `protobuf:"bytes,7,opt,name=dimension,proto3" json:"dimension,omitempty"`
	//
	Duration int64 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	//
	IsPreview bool `protobuf:"varint,9,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	//
	WatchTimeLength int64 `protobuf:"varint,10,opt,name=watch_time_length,json=watchTimeLength,proto3" json:"watch_time_length,omitempty"`
	//
	DurationMs int64 `protobuf:"varint,11,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *PlayArc) Reset() {
	*x = PlayArc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayArc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayArc) ProtoMessage() {}

func (x *PlayArc) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayArc.ProtoReflect.Descriptor instead.
func (*PlayArc) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{32}
}

func (x *PlayArc) GetVideoType() BizType {
	if x != nil {
		return x.VideoType
	}
	return BizType_BIZ_TYPE_UNKNOWN
}

func (x *PlayArc) GetAid() uint64 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *PlayArc) GetCid() uint64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *PlayArc) GetDrmTechType() DrmTechType {
	if x != nil {
		return x.DrmTechType
	}
	return DrmTechType_UNKNOWN_DRM
}

func (x *PlayArc) GetArcType() ArcType {
	if x != nil {
		return x.ArcType
	}
	return ArcType_ARC_TYPE_NORMAL
}

func (x *PlayArc) GetInteraction() *Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *PlayArc) GetDimension() *Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *PlayArc) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PlayArc) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

func (x *PlayArc) GetWatchTimeLength() int64 {
	if x != nil {
		return x.WatchTimeLength
	}
	return 0
}

func (x *PlayArc) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

// 播放页信息-响应: PlayArcConf
type PlayArcConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArcConfs map[int32]*ArcConf `protobuf:"bytes,1,rep,name=arc_confs,json=arcConfs,proto3" json:"arc_confs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayArcConf) Reset() {
	*x = PlayArcConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayArcConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayArcConf) ProtoMessage() {}

func (x *PlayArcConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayArcConf.ProtoReflect.Descriptor instead.
func (*PlayArcConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{33}
}

func (x *PlayArcConf) GetArcConfs() map[int32]*ArcConf {
	if x != nil {
		return x.ArcConfs
	}
	return nil
}

//
type PlayDeviceConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DeviceConfs map[int32]*DeviceConf `protobuf:"bytes,1,rep,name=device_confs,json=deviceConfs,proto3" json:"device_confs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayDeviceConf) Reset() {
	*x = PlayDeviceConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayDeviceConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayDeviceConf) ProtoMessage() {}

func (x *PlayDeviceConf) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayDeviceConf.ProtoReflect.Descriptor instead.
func (*PlayDeviceConf) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{34}
}

func (x *PlayDeviceConf) GetDeviceConfs() map[int32]*DeviceConf {
	if x != nil {
		return x.DeviceConfs
	}
	return nil
}

//
type PlayList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	SeasonId int64 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	//
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	//
	Link string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	//
	BadgeInfo *BadgeInfo `protobuf:"bytes,5,opt,name=badge_info,json=badgeInfo,proto3" json:"badge_info,omitempty"`
}

func (x *PlayList) Reset() {
	*x = PlayList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayList) ProtoMessage() {}

func (x *PlayList) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayList.ProtoReflect.Descriptor instead.
func (*PlayList) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{35}
}

func (x *PlayList) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *PlayList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlayList) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *PlayList) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PlayList) GetBadgeInfo() *BadgeInfo {
	if x != nil {
		return x.BadgeInfo
	}
	return nil
}

//
type PlayListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	PlayList []*PlayList `protobuf:"bytes,2,rep,name=play_list,json=playList,proto3" json:"play_list,omitempty"`
}

func (x *PlayListInfo) Reset() {
	*x = PlayListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayListInfo) ProtoMessage() {}

func (x *PlayListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayListInfo.ProtoReflect.Descriptor instead.
func (*PlayListInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{36}
}

func (x *PlayListInfo) GetPlayList() []*PlayList {
	if x != nil {
		return x.PlayList
	}
	return nil
}

// 视频下方广告 Banner
type PromptBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Title *TextInfo `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	//
	Subtitle *TextInfo `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	//
	SubTitleIcon string `protobuf:"bytes,3,opt,name=sub_title_icon,json=subTitleIcon,proto3" json:"sub_title_icon,omitempty"`
	//
	BgImage string `protobuf:"bytes,4,opt,name=bg_image,json=bgImage,proto3" json:"bg_image,omitempty"`
	//
	BgGradientColor *GradientColor `protobuf:"bytes,5,opt,name=bg_gradient_color,json=bgGradientColor,proto3" json:"bg_gradient_color,omitempty"`
	//
	Button []*ButtonInfo `protobuf:"bytes,6,rep,name=button,proto3" json:"button,omitempty"`
	//
	Report *Report `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
	//
	FullScreenIpIcon string `protobuf:"bytes,8,opt,name=full_screen_ip_icon,json=fullScreenIpIcon,proto3" json:"full_screen_ip_icon,omitempty"`
	//
	FullScreenBgGradientColor *GradientColor `protobuf:"bytes,9,opt,name=full_screen_bg_gradient_color,json=fullScreenBgGradientColor,proto3" json:"full_screen_bg_gradient_color,omitempty"`
	//
	PromptBarType PromptBarType `protobuf:"varint,10,opt,name=prompt_bar_type,json=promptBarType,proto3,enum=bilibili.playershared.PromptBarType" json:"prompt_bar_type,omitempty"`
	//
	PromptBarStyle PromptBarStyle `protobuf:"varint,11,opt,name=prompt_bar_style,json=promptBarStyle,proto3,enum=bilibili.playershared.PromptBarStyle" json:"prompt_bar_style,omitempty"`
	//
	BenefitInfos []*BenefitInfo `protobuf:"bytes,12,rep,name=benefit_infos,json=benefitInfos,proto3" json:"benefit_infos,omitempty"`
	//
	EndTime int64 `protobuf:"varint,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *PromptBar) Reset() {
	*x = PromptBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptBar) ProtoMessage() {}

func (x *PromptBar) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptBar.ProtoReflect.Descriptor instead.
func (*PromptBar) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{37}
}

func (x *PromptBar) GetTitle() *TextInfo {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *PromptBar) GetSubtitle() *TextInfo {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *PromptBar) GetSubTitleIcon() string {
	if x != nil {
		return x.SubTitleIcon
	}
	return ""
}

func (x *PromptBar) GetBgImage() string {
	if x != nil {
		return x.BgImage
	}
	return ""
}

func (x *PromptBar) GetBgGradientColor() *GradientColor {
	if x != nil {
		return x.BgGradientColor
	}
	return nil
}

func (x *PromptBar) GetButton() []*ButtonInfo {
	if x != nil {
		return x.Button
	}
	return nil
}

func (x *PromptBar) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *PromptBar) GetFullScreenIpIcon() string {
	if x != nil {
		return x.FullScreenIpIcon
	}
	return ""
}

func (x *PromptBar) GetFullScreenBgGradientColor() *GradientColor {
	if x != nil {
		return x.FullScreenBgGradientColor
	}
	return nil
}

func (x *PromptBar) GetPromptBarType() PromptBarType {
	if x != nil {
		return x.PromptBarType
	}
	return PromptBarType_PROMPT_BAR_TYPE_UNKNOWN
}

func (x *PromptBar) GetPromptBarStyle() PromptBarStyle {
	if x != nil {
		return x.PromptBarStyle
	}
	return PromptBarStyle_PROMPT_BAR_STYLE_UNKNOWN
}

func (x *PromptBar) GetBenefitInfos() []*BenefitInfo {
	if x != nil {
		return x.BenefitInfos
	}
	return nil
}

func (x *PromptBar) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 播放页信息-响应: 高画质试看信息
type QnTrialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 能否试看高画质
	TrialAble bool `protobuf:"varint,1,opt,name=trial_able,json=trialAble,proto3" json:"trial_able,omitempty"`
	//
	RemainingTimes int32 `protobuf:"varint,2,opt,name=remaining_times,json=remainingTimes,proto3" json:"remaining_times,omitempty"`
	//
	Start int32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	//
	TimeLength int32 `protobuf:"varint,4,opt,name=time_length,json=timeLength,proto3" json:"time_length,omitempty"`
	//
	StartToast *Toast `protobuf:"bytes,5,opt,name=start_toast,json=startToast,proto3" json:"start_toast,omitempty"`
	//
	EndToast *Toast `protobuf:"bytes,6,opt,name=end_toast,json=endToast,proto3" json:"end_toast,omitempty"`
	//
	QualityOpenTipBtn *Button `protobuf:"bytes,8,opt,name=quality_open_tip_btn,json=qualityOpenTipBtn,proto3" json:"quality_open_tip_btn,omitempty"`
}

func (x *QnTrialInfo) Reset() {
	*x = QnTrialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QnTrialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QnTrialInfo) ProtoMessage() {}

func (x *QnTrialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QnTrialInfo.ProtoReflect.Descriptor instead.
func (*QnTrialInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{38}
}

func (x *QnTrialInfo) GetTrialAble() bool {
	if x != nil {
		return x.TrialAble
	}
	return false
}

func (x *QnTrialInfo) GetRemainingTimes() int32 {
	if x != nil {
		return x.RemainingTimes
	}
	return 0
}

func (x *QnTrialInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QnTrialInfo) GetTimeLength() int32 {
	if x != nil {
		return x.TimeLength
	}
	return 0
}

func (x *QnTrialInfo) GetStartToast() *Toast {
	if x != nil {
		return x.StartToast
	}
	return nil
}

func (x *QnTrialInfo) GetEndToast() *Toast {
	if x != nil {
		return x.EndToast
	}
	return nil
}

func (x *QnTrialInfo) GetQualityOpenTipBtn() *Button {
	if x != nil {
		return x.QualityOpenTipBtn
	}
	return nil
}

//
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	ShowEventId string `protobuf:"bytes,1,opt,name=show_event_id,json=showEventId,proto3" json:"show_event_id,omitempty"`
	//
	ClickEventId string `protobuf:"bytes,2,opt,name=click_event_id,json=clickEventId,proto3" json:"click_event_id,omitempty"`
	//
	Extends string `protobuf:"bytes,3,opt,name=extends,proto3" json:"extends,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{39}
}

func (x *Report) GetShowEventId() string {
	if x != nil {
		return x.ShowEventId
	}
	return ""
}

func (x *Report) GetClickEventId() string {
	if x != nil {
		return x.ClickEventId
	}
	return ""
}

func (x *Report) GetExtends() string {
	if x != nil {
		return x.Extends
	}
	return ""
}

// Dash Response, 未使用
type ResponseDash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video []*DashItem `protobuf:"bytes,1,rep,name=video,proto3" json:"video,omitempty"`
	Audio []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *ResponseDash) Reset() {
	*x = ResponseDash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDash) ProtoMessage() {}

func (x *ResponseDash) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDash.ProtoReflect.Descriptor instead.
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{40}
}

func (x *ResponseDash) GetVideo() []*DashItem {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ResponseDash) GetAudio() []*DashItem {
	if x != nil {
		return x.Audio
	}
	return nil
}

// 分段流条目
type ResponseUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分段序号
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	// 分段时长
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// 分段大小
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 主线流
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// 备用流
	BackupUrl []string `protobuf:"bytes,5,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	// md5
	Md5 string `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *ResponseUrl) Reset() {
	*x = ResponseUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUrl) ProtoMessage() {}

func (x *ResponseUrl) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUrl.ProtoReflect.Descriptor instead.
func (*ResponseUrl) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{41}
}

func (x *ResponseUrl) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ResponseUrl) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ResponseUrl) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResponseUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResponseUrl) GetBackupUrl() []string {
	if x != nil {
		return x.BackupUrl
	}
	return nil
}

func (x *ResponseUrl) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

// 方案
type Scheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	ActionType Scheme_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=bilibili.playershared.Scheme_ActionType" json:"action_type,omitempty"`
	//
	Toast string `protobuf:"bytes,2,opt,name=toast,proto3" json:"toast,omitempty"`
}

func (x *Scheme) Reset() {
	*x = Scheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme) ProtoMessage() {}

func (x *Scheme) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme.ProtoReflect.Descriptor instead.
func (*Scheme) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{42}
}

func (x *Scheme) GetActionType() Scheme_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Scheme_UNKNOWN
}

func (x *Scheme) GetToast() string {
	if x != nil {
		return x.Toast
	}
	return ""
}

// 视频流信息: 分段流
type SegmentVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*ResponseUrl `protobuf:"bytes,1,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SegmentVideo) Reset() {
	*x = SegmentVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentVideo) ProtoMessage() {}

func (x *SegmentVideo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentVideo.ProtoReflect.Descriptor instead.
func (*SegmentVideo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{43}
}

func (x *SegmentVideo) GetSegment() []*ResponseUrl {
	if x != nil {
		return x.Segment
	}
	return nil
}

// 震动
type Shake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Shake) Reset() {
	*x = Shake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shake) ProtoMessage() {}

func (x *Shake) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shake.ProtoReflect.Descriptor instead.
func (*Shake) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{44}
}

func (x *Shake) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

// 视频流信息
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 元数据
	StreamInfo *StreamInfo `protobuf:"bytes,1,opt,name=stream_info,json=streamInfo,proto3" json:"stream_info,omitempty"`
	// 流数据
	//
	// Types that are assignable to Content:
	//
	//	*Stream_DashVideo
	//	*Stream_SegmentVideo
	Content isStream_Content `protobuf_oneof:"content"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{45}
}

func (x *Stream) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (m *Stream) GetContent() isStream_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Stream) GetDashVideo() *DashVideo {
	if x, ok := x.GetContent().(*Stream_DashVideo); ok {
		return x.DashVideo
	}
	return nil
}

func (x *Stream) GetSegmentVideo() *SegmentVideo {
	if x, ok := x.GetContent().(*Stream_SegmentVideo); ok {
		return x.SegmentVideo
	}
	return nil
}

type isStream_Content interface {
	isStream_Content()
}

type Stream_DashVideo struct {
	// dash流
	DashVideo *DashVideo `protobuf:"bytes,2,opt,name=dash_video,json=dashVideo,proto3,oneof"`
}

type Stream_SegmentVideo struct {
	// 分段流
	SegmentVideo *SegmentVideo `protobuf:"bytes,3,opt,name=segment_video,json=segmentVideo,proto3,oneof"`
}

func (*Stream_DashVideo) isStream_Content() {}

func (*Stream_SegmentVideo) isStream_Content() {}

// 视频流信息: 元数据
type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 格式描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 错误码
	ErrCode uint32 `protobuf:"varint,4,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	// 不满足条件信息
	Limit *StreamLimit `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// 是否需要vip
	NeedVip bool `protobuf:"varint,6,opt,name=need_vip,json=needVip,proto3" json:"need_vip,omitempty"`
	// 是否需要登录
	NeedLogin bool `protobuf:"varint,7,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	// 是否完整
	Intact bool `protobuf:"varint,8,opt,name=intact,proto3" json:"intact,omitempty"`
	// 是否非全二压
	NoRexcode bool `protobuf:"varint,9,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	// 清晰度属性位
	Attribute int64 `protobuf:"varint,10,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// 新版格式描述
	NewDescription string `protobuf:"bytes,11,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	// 格式文字
	DisplayDesc string `protobuf:"bytes,12,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	// 新版格式描述备注
	Superscript string `protobuf:"bytes,13,opt,name=superscript,proto3" json:"superscript,omitempty"`
	//
	VipFree bool `protobuf:"varint,14,opt,name=vip_free,json=vipFree,proto3" json:"vip_free,omitempty"`
	//
	Subtitle string `protobuf:"bytes,15,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 方案
	Scheme *Scheme `protobuf:"bytes,16,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// 支持drm
	SupportDrm bool `protobuf:"varint,17,opt,name=support_drm,json=supportDrm,proto3" json:"support_drm,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{46}
}

func (x *StreamInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *StreamInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StreamInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StreamInfo) GetErrCode() uint32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *StreamInfo) GetLimit() *StreamLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *StreamInfo) GetNeedVip() bool {
	if x != nil {
		return x.NeedVip
	}
	return false
}

func (x *StreamInfo) GetNeedLogin() bool {
	if x != nil {
		return x.NeedLogin
	}
	return false
}

func (x *StreamInfo) GetIntact() bool {
	if x != nil {
		return x.Intact
	}
	return false
}

func (x *StreamInfo) GetNoRexcode() bool {
	if x != nil {
		return x.NoRexcode
	}
	return false
}

func (x *StreamInfo) GetAttribute() int64 {
	if x != nil {
		return x.Attribute
	}
	return 0
}

func (x *StreamInfo) GetNewDescription() string {
	if x != nil {
		return x.NewDescription
	}
	return ""
}

func (x *StreamInfo) GetDisplayDesc() string {
	if x != nil {
		return x.DisplayDesc
	}
	return ""
}

func (x *StreamInfo) GetSuperscript() string {
	if x != nil {
		return x.Superscript
	}
	return ""
}

func (x *StreamInfo) GetVipFree() bool {
	if x != nil {
		return x.VipFree
	}
	return false
}

func (x *StreamInfo) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *StreamInfo) GetScheme() *Scheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *StreamInfo) GetSupportDrm() bool {
	if x != nil {
		return x.SupportDrm
	}
	return false
}

// 视频流信息: 流媒体元数据: 清晰度不满足条件信息
type StreamLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转地址
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// 提示信息
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StreamLimit) Reset() {
	*x = StreamLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLimit) ProtoMessage() {}

func (x *StreamLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLimit.ProtoReflect.Descriptor instead.
func (*StreamLimit) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{47}
}

func (x *StreamLimit) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StreamLimit) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *StreamLimit) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//
type TaskParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	TaskType string `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	//
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	//
	TipsId int64 `protobuf:"varint,3,opt,name=tips_id,json=tipsId,proto3" json:"tips_id,omitempty"`
}

func (x *TaskParam) Reset() {
	*x = TaskParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskParam) ProtoMessage() {}

func (x *TaskParam) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskParam.ProtoReflect.Descriptor instead.
func (*TaskParam) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{48}
}

func (x *TaskParam) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskParam) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *TaskParam) GetTipsId() int64 {
	if x != nil {
		return x.TipsId
	}
	return 0
}

//
type TextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	//
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	//
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
}

func (x *TextInfo) Reset() {
	*x = TextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInfo) ProtoMessage() {}

func (x *TextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInfo.ProtoReflect.Descriptor instead.
func (*TextInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{49}
}

func (x *TextInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextInfo) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

func (x *TextInfo) GetTextColorNight() string {
	if x != nil {
		return x.TextColorNight
	}
	return ""
}

// Toast信息
type Toast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toast文案
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// toast按钮
	Button *Button `protobuf:"bytes,2,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *Toast) Reset() {
	*x = Toast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toast) ProtoMessage() {}

func (x *Toast) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toast.ProtoReflect.Descriptor instead.
func (*Toast) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{50}
}

func (x *Toast) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Toast) GetButton() *Button {
	if x != nil {
		return x.Button
	}
	return nil
}

// 播放页信息-请求: 音视频VOD
type VideoVod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频aid
	Aid int32 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// 视频cid
	Cid int32 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// 清晰度
	Qn uint64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	// 视频流版本
	Fnver int32 `protobuf:"varint,4,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 视频流格式
	Fnval int32 `protobuf:"varint,5,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 下载模式
	// 0:播放 1:flv下载 2:dash下载
	Download uint32 `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
	// 流url强制是用域名
	// 0:允许使用ip 1:使用http 2:使用https
	ForceHost int32 `protobuf:"varint,7,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否4K
	Fourk bool `protobuf:"varint,8,opt,name=fourk,proto3" json:"fourk,omitempty"`
	// 视频编码
	PreferCodecType CodeType `protobuf:"varint,9,opt,name=prefer_codec_type,json=preferCodecType,proto3,enum=bilibili.playershared.CodeType" json:"prefer_codec_type,omitempty"`
	// 响度均衡
	VoiceBalance uint64 `protobuf:"varint,10,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty"`
}

func (x *VideoVod) Reset() {
	*x = VideoVod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoVod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoVod) ProtoMessage() {}

func (x *VideoVod) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoVod.ProtoReflect.Descriptor instead.
func (*VideoVod) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{51}
}

func (x *VideoVod) GetAid() int32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *VideoVod) GetCid() int32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *VideoVod) GetQn() uint64 {
	if x != nil {
		return x.Qn
	}
	return 0
}

func (x *VideoVod) GetFnver() int32 {
	if x != nil {
		return x.Fnver
	}
	return 0
}

func (x *VideoVod) GetFnval() int32 {
	if x != nil {
		return x.Fnval
	}
	return 0
}

func (x *VideoVod) GetDownload() uint32 {
	if x != nil {
		return x.Download
	}
	return 0
}

func (x *VideoVod) GetForceHost() int32 {
	if x != nil {
		return x.ForceHost
	}
	return 0
}

func (x *VideoVod) GetFourk() bool {
	if x != nil {
		return x.Fourk
	}
	return false
}

func (x *VideoVod) GetPreferCodecType() CodeType {
	if x != nil {
		return x.PreferCodecType
	}
	return CodeType_NOCODE
}

func (x *VideoVod) GetVoiceBalance() uint64 {
	if x != nil {
		return x.VoiceBalance
	}
	return 0
}

//
type ViewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	DialogMap map[string]*Dialog `protobuf:"bytes,1,rep,name=dialog_map,json=dialogMap,proto3" json:"dialog_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	PromptBar *PromptBar `protobuf:"bytes,2,opt,name=prompt_bar,json=promptBar,proto3" json:"prompt_bar,omitempty"`
	//
	Toasts []*ComprehensiveToast `protobuf:"bytes,3,rep,name=toasts,proto3" json:"toasts,omitempty"`
}

func (x *ViewInfo) Reset() {
	*x = ViewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewInfo) ProtoMessage() {}

func (x *ViewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewInfo.ProtoReflect.Descriptor instead.
func (*ViewInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{52}
}

func (x *ViewInfo) GetDialogMap() map[string]*Dialog {
	if x != nil {
		return x.DialogMap
	}
	return nil
}

func (x *ViewInfo) GetPromptBar() *PromptBar {
	if x != nil {
		return x.PromptBar
	}
	return nil
}

func (x *ViewInfo) GetToasts() []*ComprehensiveToast {
	if x != nil {
		return x.Toasts
	}
	return nil
}

// 播放页信息-响应: VOD音视频信息
type VodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频清晰度
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 视频格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 视频时长
	Timelength uint64 `protobuf:"varint,3,opt,name=timelength,proto3" json:"timelength,omitempty"`
	// 视频编码id
	VideoCodecid uint32 `protobuf:"varint,4,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	// 视频流
	StreamList []*Stream `protobuf:"bytes,5,rep,name=stream_list,json=streamList,proto3" json:"stream_list,omitempty"`
	// 伴音流
	DashAudio []*DashItem `protobuf:"bytes,6,rep,name=dash_audio,json=dashAudio,proto3" json:"dash_audio,omitempty"`
	// 杜比伴音流
	Dolby *DolbyItem `protobuf:"bytes,7,opt,name=dolby,proto3" json:"dolby,omitempty"`
	// 响度均衡操作信息
	Volume *VolumeInfo `protobuf:"bytes,8,opt,name=volume,proto3" json:"volume,omitempty"`
	// HIRES伴音流信息
	LossLessItem *LossLessItem `protobuf:"bytes,9,opt,name=loss_less_item,json=lossLessItem,proto3" json:"loss_less_item,omitempty"`
	// 是否支持投屏
	SupportProject bool `protobuf:"varint,10,opt,name=support_project,json=supportProject,proto3" json:"support_project,omitempty"`
}

func (x *VodInfo) Reset() {
	*x = VodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodInfo) ProtoMessage() {}

func (x *VodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodInfo.ProtoReflect.Descriptor instead.
func (*VodInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{53}
}

func (x *VodInfo) GetQuality() uint32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *VodInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodInfo) GetTimelength() uint64 {
	if x != nil {
		return x.Timelength
	}
	return 0
}

func (x *VodInfo) GetVideoCodecid() uint32 {
	if x != nil {
		return x.VideoCodecid
	}
	return 0
}

func (x *VodInfo) GetStreamList() []*Stream {
	if x != nil {
		return x.StreamList
	}
	return nil
}

func (x *VodInfo) GetDashAudio() []*DashItem {
	if x != nil {
		return x.DashAudio
	}
	return nil
}

func (x *VodInfo) GetDolby() *DolbyItem {
	if x != nil {
		return x.Dolby
	}
	return nil
}

func (x *VodInfo) GetVolume() *VolumeInfo {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *VodInfo) GetLossLessItem() *LossLessItem {
	if x != nil {
		return x.LossLessItem
	}
	return nil
}

func (x *VodInfo) GetSupportProject() bool {
	if x != nil {
		return x.SupportProject
	}
	return false
}

// 响度均衡操作信息
type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Measured integrated loudness 实际综合响度
	MeasuredI float64 `protobuf:"fixed64,1,opt,name=measured_i,json=measuredI,proto3" json:"measured_i,omitempty"`
	// Measured loudness range 实际响度范围
	MeasuredLra float64 `protobuf:"fixed64,2,opt,name=measured_lra,json=measuredLra,proto3" json:"measured_lra,omitempty"`
	// Measured true peak 实际响度真峰值
	MeasuredTp float64 `protobuf:"fixed64,3,opt,name=measured_tp,json=measuredTp,proto3" json:"measured_tp,omitempty"`
	// Measured threshold 实际响度阈值
	MeasuredThreshold float64 `protobuf:"fixed64,4,opt,name=measured_threshold,json=measuredThreshold,proto3" json:"measured_threshold,omitempty"`
	// Target offset gain(Gain is applied before the true-peak limiter) 目标增益Offset(增益在真实峰值限制器之前应用)
	TargetOffset float64 `protobuf:"fixed64,5,opt,name=target_offset,json=targetOffset,proto3" json:"target_offset,omitempty"`
	// Target integrated loudness 目标综合响度
	TargetI float64 `protobuf:"fixed64,6,opt,name=target_i,json=targetI,proto3" json:"target_i,omitempty"`
	// Target true peak 目标响度真峰值
	TargetTp float64 `protobuf:"fixed64,7,opt,name=target_tp,json=targetTp,proto3" json:"target_tp,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bilibili_playershared_playershared_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bilibili_playershared_playershared_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_bilibili_playershared_playershared_proto_rawDescGZIP(), []int{54}
}

func (x *VolumeInfo) GetMeasuredI() float64 {
	if x != nil {
		return x.MeasuredI
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredLra() float64 {
	if x != nil {
		return x.MeasuredLra
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredTp() float64 {
	if x != nil {
		return x.MeasuredTp
	}
	return 0
}

func (x *VolumeInfo) GetMeasuredThreshold() float64 {
	if x != nil {
		return x.MeasuredThreshold
	}
	return 0
}

func (x *VolumeInfo) GetTargetOffset() float64 {
	if x != nil {
		return x.TargetOffset
	}
	return 0
}

func (x *VolumeInfo) GetTargetI() float64 {
	if x != nil {
		return x.TargetI
	}
	return 0
}

func (x *VolumeInfo) GetTargetTp() float64 {
	if x != nil {
		return x.TargetTp
	}
	return 0
}

var File_bilibili_playershared_playershared_proto protoreflect.FileDescriptor

var file_bilibili_playershared_playershared_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a,
	0x07, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x11,
	0x62, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62,
	0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x22, 0xa3, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6a,
	0x75, 0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x6c, 0x66, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x61, 0x6c, 0x66, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	0x5a, 0x0a, 0x0d, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x06,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x54,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x07, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x10,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x31, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x44, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x03, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68,
	0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73, 0x73, 0x68,
	0x22, 0xcf, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x73, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x65, 0x76, 0x69, 0x6e, 0x65, 0x50, 0x73,
	0x73, 0x68, 0x22, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf4, 0x06, 0x0a, 0x06, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e,
	0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x4b, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x11, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x62, 0x74, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x48, 0x69, 0x64,
	0x65, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x74, 0x6e, 0x22, 0x51, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x09,
	0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x44, 0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x27, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x54, 0x4d,
	0x4f, 0x53, 0x10, 0x02, 0x22, 0x54, 0x0a, 0x0d, 0x45, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x45, 0x70,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4c, 0x0a, 0x0f, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x45, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x0d,
	0x65, 0x70, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x3b, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x68,
	0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x45,
	0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a,
	0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x11, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x51, 0x0a, 0x0d,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x40, 0x0a,
	0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x22,
	0xa8, 0x03, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x0a, 0x08, 0x76, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x76, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x47,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x61, 0x73, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x74,
	0x6f, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x10, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x65,
	0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x56, 0x69, 0x70, 0x22, 0x47, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0xfd, 0x03,
	0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0d,
	0x64, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x72, 0x6d, 0x54,
	0x65, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x72, 0x6d, 0x54, 0x65, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41,
	0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4d, 0x0a,
	0x09, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x61, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x1a, 0x5b, 0x0a, 0x0d,
	0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x50, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x59, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x1a, 0x61, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x9e, 0x06, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61,
	0x72, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x67, 0x5f, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x49, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x1d, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x42, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x0b, 0x51, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x61,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x70, 0x5f, 0x62, 0x74, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x70, 0x42, 0x74, 0x6e, 0x22, 0x6c, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x94,
	0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x54, 0x4f,
	0x41, 0x53, 0x54, 0x10, 0x01, 0x22, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x41, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x04, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x78, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x78, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x76, 0x69, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x72, 0x6d, 0x22, 0x47, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x62, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x69, 0x70, 0x73, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x08, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x52, 0x0a, 0x05, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x56, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x71, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6e, 0x76, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6e, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66,
	0x6e, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x6f, 0x75, 0x72, 0x6b, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x62, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x42, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x52,
	0x06, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x0e, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x03, 0x0a, 0x07, 0x56, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x69,
	0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x61,
	0x73, 0x68, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x44,
	0x6f, 0x6c, 0x62, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x64, 0x6f, 0x6c, 0x62, 0x79, 0x12,
	0x39, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x4c,
	0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6c, 0x6f, 0x73, 0x73, 0x4c, 0x65, 0x73,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xfb,
	0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x49, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x72, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x70,
	0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x70, 0x2a, 0x35, 0x0a, 0x07,
	0x41, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x52, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x47, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x5a, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x47, 0x43, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x5a, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x47, 0x56, 0x10, 0x03, 0x2a, 0xd9, 0x01, 0x0a, 0x0c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x49, 0x50,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47,
	0x50, 0x4c, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x50, 0x10, 0x0d, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x0f, 0x2a, 0x3d, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x34, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x44, 0x45, 0x32, 0x36, 0x35, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44,
	0x45, 0x41, 0x56, 0x31, 0x10, 0x03, 0x2a, 0x9a, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x49, 0x50, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x41, 0x53, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x42,
	0x41, 0x43, 0x4b, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4d,
	0x45, 0x55, 0x50, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43,
	0x4b, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41, 0x4c, 0x45,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x4b, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x4c, 0x45, 0x43, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0e,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x0f,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x10,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x10, 0x11, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x44, 0x49, 0x54, 0x44, 0x4d, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41,
	0x4b, 0x45, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x44, 0x4d, 0x10,
	0x19, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x44, 0x4d, 0x10, 0x1a, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x41, 0x4e, 0x4f, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x4f, 0x4c, 0x42, 0x59, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x53, 0x53,
	0x4c, 0x45, 0x53, 0x53, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x45, 0x59, 0x41, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x45, 0x59, 0x41, 0x46,
	0x55, 0x4c, 0x4c, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4b,
	0x49, 0x50, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x55,
	0x42, 0x42, 0x49, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x10, 0x24, 0x2a, 0x4a, 0x0a, 0x0b, 0x44, 0x72, 0x6d, 0x54, 0x65, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x52,
	0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x49, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4c, 0x49, 0x5f, 0x44, 0x52, 0x4d, 0x10, 0x03, 0x2a,
	0x41, 0x0a, 0x07, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x41, 0x55, 0x53, 0x53, 0x49, 0x41, 0x4e, 0x5f, 0x42, 0x4c, 0x55, 0x52,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x10, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x0c, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x5f, 0x46,
	0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x47, 0x56,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0a, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x2a, 0x4e, 0x0a, 0x0f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4c,
	0x4f, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x50, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x45, 0x72, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x01, 0x2a, 0x73, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x49, 0x46, 0x54,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x2a, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x42, 0x41, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x42,
	0x41, 0x52, 0x10, 0x01, 0x2a, 0x68, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0xbc,
	0x01, 0x0a, 0x09, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x56, 0x49, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4d, 0x49, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49, 0x50, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x47, 0x56, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x50, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x10, 0x06, 0x2a, 0x31, 0x0a,
	0x0e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x45, 0x52, 0x45, 0x10, 0x01,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x6d, 0x74, 0x63, 0x32, 0x33, 0x33, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x2d, 0x67, 0x72, 0x70,
	0x63, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bilibili_playershared_playershared_proto_rawDescOnce sync.Once
	file_bilibili_playershared_playershared_proto_rawDescData = file_bilibili_playershared_playershared_proto_rawDesc
)

func file_bilibili_playershared_playershared_proto_rawDescGZIP() []byte {
	file_bilibili_playershared_playershared_proto_rawDescOnce.Do(func() {
		file_bilibili_playershared_playershared_proto_rawDescData = protoimpl.X.CompressGZIP(file_bilibili_playershared_playershared_proto_rawDescData)
	})
	return file_bilibili_playershared_playershared_proto_rawDescData
}

var file_bilibili_playershared_playershared_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_bilibili_playershared_playershared_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_bilibili_playershared_playershared_proto_goTypes = []interface{}{
	(ArcType)(0),               // 0: bilibili.playershared.ArcType
	(BizType)(0),               // 1: bilibili.playershared.BizType
	(ButtonAction)(0),          // 2: bilibili.playershared.ButtonAction
	(CodeType)(0),              // 3: bilibili.playershared.CodeType
	(ConfType)(0),              // 4: bilibili.playershared.ConfType
	(DrmTechType)(0),           // 5: bilibili.playershared.DrmTechType
	(Effects)(0),               // 6: bilibili.playershared.Effects
	(ExtDataType)(0),           // 7: bilibili.playershared.ExtDataType
	(FragmentPosition)(0),      // 8: bilibili.playershared.FragmentPosition
	(FragmentType)(0),          // 9: bilibili.playershared.FragmentType
	(GuideStyle)(0),            // 10: bilibili.playershared.GuideStyle
	(LimitActionType)(0),       // 11: bilibili.playershared.LimitActionType
	(PlayErr)(0),               // 12: bilibili.playershared.PlayErr
	(PromptBarStyle)(0),        // 13: bilibili.playershared.PromptBarStyle
	(PromptBarType)(0),         // 14: bilibili.playershared.PromptBarType
	(ShowStyleType)(0),         // 15: bilibili.playershared.ShowStyleType
	(ToastType)(0),             // 16: bilibili.playershared.ToastType
	(UnsupportScene)(0),        // 17: bilibili.playershared.UnsupportScene
	(DolbyItem_Type)(0),        // 18: bilibili.playershared.DolbyItem.Type
	(Scheme_ActionType)(0),     // 19: bilibili.playershared.Scheme.ActionType
	(*ArcConf)(nil),            // 20: bilibili.playershared.ArcConf
	(*BackgroundInfo)(nil),     // 21: bilibili.playershared.BackgroundInfo
	(*BadgeInfo)(nil),          // 22: bilibili.playershared.BadgeInfo
	(*Banner)(nil),             // 23: bilibili.playershared.Banner
	(*BenefitInfo)(nil),        // 24: bilibili.playershared.BenefitInfo
	(*BottomDisplay)(nil),      // 25: bilibili.playershared.BottomDisplay
	(*Button)(nil),             // 26: bilibili.playershared.Button
	(*ButtonInfo)(nil),         // 27: bilibili.playershared.ButtonInfo
	(*ComprehensiveToast)(nil), // 28: bilibili.playershared.ComprehensiveToast
	(*ConfValue)(nil),          // 29: bilibili.playershared.ConfValue
	(*DashItem)(nil),           // 30: bilibili.playershared.DashItem
	(*DashVideo)(nil),          // 31: bilibili.playershared.DashVideo
	(*DeviceConf)(nil),         // 32: bilibili.playershared.DeviceConf
	(*Dialog)(nil),             // 33: bilibili.playershared.Dialog
	(*Dimension)(nil),          // 34: bilibili.playershared.Dimension
	(*DolbyItem)(nil),          // 35: bilibili.playershared.DolbyItem
	(*EpInlineVideo)(nil),      // 36: bilibili.playershared.EpInlineVideo
	(*EpInlineVideoInfo)(nil),  // 37: bilibili.playershared.EpInlineVideoInfo
	(*Event)(nil),              // 38: bilibili.playershared.Event
	(*ExtData)(nil),            // 39: bilibili.playershared.ExtData
	(*ExtraContent)(nil),       // 40: bilibili.playershared.ExtraContent
	(*Fragment)(nil),           // 41: bilibili.playershared.Fragment
	(*FragmentInfo)(nil),       // 42: bilibili.playershared.FragmentInfo
	(*FragmentVideo)(nil),      // 43: bilibili.playershared.FragmentVideo
	(*FragmentVideoInfo)(nil),  // 44: bilibili.playershared.FragmentVideoInfo
	(*GradientColor)(nil),      // 45: bilibili.playershared.GradientColor
	(*History)(nil),            // 46: bilibili.playershared.History
	(*HistoryInfo)(nil),        // 47: bilibili.playershared.HistoryInfo
	(*ImageInfo)(nil),          // 48: bilibili.playershared.ImageInfo
	(*Interaction)(nil),        // 49: bilibili.playershared.Interaction
	(*LossLessItem)(nil),       // 50: bilibili.playershared.LossLessItem
	(*Node)(nil),               // 51: bilibili.playershared.Node
	(*PlayArc)(nil),            // 52: bilibili.playershared.PlayArc
	(*PlayArcConf)(nil),        // 53: bilibili.playershared.PlayArcConf
	(*PlayDeviceConf)(nil),     // 54: bilibili.playershared.PlayDeviceConf
	(*PlayList)(nil),           // 55: bilibili.playershared.PlayList
	(*PlayListInfo)(nil),       // 56: bilibili.playershared.PlayListInfo
	(*PromptBar)(nil),          // 57: bilibili.playershared.PromptBar
	(*QnTrialInfo)(nil),        // 58: bilibili.playershared.QnTrialInfo
	(*Report)(nil),             // 59: bilibili.playershared.Report
	(*ResponseDash)(nil),       // 60: bilibili.playershared.ResponseDash
	(*ResponseUrl)(nil),        // 61: bilibili.playershared.ResponseUrl
	(*Scheme)(nil),             // 62: bilibili.playershared.Scheme
	(*SegmentVideo)(nil),       // 63: bilibili.playershared.SegmentVideo
	(*Shake)(nil),              // 64: bilibili.playershared.Shake
	(*Stream)(nil),             // 65: bilibili.playershared.Stream
	(*StreamInfo)(nil),         // 66: bilibili.playershared.StreamInfo
	(*StreamLimit)(nil),        // 67: bilibili.playershared.StreamLimit
	(*TaskParam)(nil),          // 68: bilibili.playershared.TaskParam
	(*TextInfo)(nil),           // 69: bilibili.playershared.TextInfo
	(*Toast)(nil),              // 70: bilibili.playershared.Toast
	(*VideoVod)(nil),           // 71: bilibili.playershared.VideoVod
	(*ViewInfo)(nil),           // 72: bilibili.playershared.ViewInfo
	(*VodInfo)(nil),            // 73: bilibili.playershared.VodInfo
	(*VolumeInfo)(nil),         // 74: bilibili.playershared.VolumeInfo
	nil,                        // 75: bilibili.playershared.Button.ReportParamsEntry
	nil,                        // 76: bilibili.playershared.ButtonInfo.OrderReportParamsEntry
	nil,                        // 77: bilibili.playershared.ComprehensiveToast.OrderReportParamsEntry
	nil,                        // 78: bilibili.playershared.PlayArcConf.ArcConfsEntry
	nil,                        // 79: bilibili.playershared.PlayDeviceConf.DeviceConfsEntry
	nil,                        // 80: bilibili.playershared.ViewInfo.DialogMapEntry
	(*anypb.Any)(nil),          // 81: google.protobuf.Any
}
var file_bilibili_playershared_playershared_proto_depIdxs = []int32{
	40, // 0: bilibili.playershared.ArcConf.extra_content:type_name -> bilibili.playershared.ExtraContent
	45, // 1: bilibili.playershared.BadgeInfo.bg_gradient_color:type_name -> bilibili.playershared.GradientColor
	59, // 2: bilibili.playershared.Banner.report:type_name -> bilibili.playershared.Report
	69, // 3: bilibili.playershared.BottomDisplay.title:type_name -> bilibili.playershared.TextInfo
	75, // 4: bilibili.playershared.Button.report_params:type_name -> bilibili.playershared.Button.ReportParamsEntry
	2,  // 5: bilibili.playershared.ButtonInfo.action_type:type_name -> bilibili.playershared.ButtonAction
	22, // 6: bilibili.playershared.ButtonInfo.badge_info:type_name -> bilibili.playershared.BadgeInfo
	59, // 7: bilibili.playershared.ButtonInfo.report:type_name -> bilibili.playershared.Report
	69, // 8: bilibili.playershared.ButtonInfo.simple_text_info:type_name -> bilibili.playershared.TextInfo
	45, // 9: bilibili.playershared.ButtonInfo.bg_gradient_color:type_name -> bilibili.playershared.GradientColor
	76, // 10: bilibili.playershared.ButtonInfo.order_report_params:type_name -> bilibili.playershared.ButtonInfo.OrderReportParamsEntry
	68, // 11: bilibili.playershared.ButtonInfo.task_param:type_name -> bilibili.playershared.TaskParam
	27, // 12: bilibili.playershared.ComprehensiveToast.button:type_name -> bilibili.playershared.ButtonInfo
	69, // 13: bilibili.playershared.ComprehensiveToast.toast_text:type_name -> bilibili.playershared.TextInfo
	59, // 14: bilibili.playershared.ComprehensiveToast.report:type_name -> bilibili.playershared.Report
	77, // 15: bilibili.playershared.ComprehensiveToast.order_report_params:type_name -> bilibili.playershared.ComprehensiveToast.OrderReportParamsEntry
	29, // 16: bilibili.playershared.DeviceConf.conf_value:type_name -> bilibili.playershared.ConfValue
	10, // 17: bilibili.playershared.Dialog.style_type:type_name -> bilibili.playershared.GuideStyle
	21, // 18: bilibili.playershared.Dialog.background_info:type_name -> bilibili.playershared.BackgroundInfo
	69, // 19: bilibili.playershared.Dialog.title:type_name -> bilibili.playershared.TextInfo
	69, // 20: bilibili.playershared.Dialog.subtitle:type_name -> bilibili.playershared.TextInfo
	48, // 21: bilibili.playershared.Dialog.image:type_name -> bilibili.playershared.ImageInfo
	27, // 22: bilibili.playershared.Dialog.button:type_name -> bilibili.playershared.ButtonInfo
	27, // 23: bilibili.playershared.Dialog.bottom_desc:type_name -> bilibili.playershared.ButtonInfo
	59, // 24: bilibili.playershared.Dialog.report:type_name -> bilibili.playershared.Report
	69, // 25: bilibili.playershared.Dialog.right_bottom_desc:type_name -> bilibili.playershared.TextInfo
	25, // 26: bilibili.playershared.Dialog.bottom_display:type_name -> bilibili.playershared.BottomDisplay
	39, // 27: bilibili.playershared.Dialog.ext_data:type_name -> bilibili.playershared.ExtData
	11, // 28: bilibili.playershared.Dialog.limit_action_type:type_name -> bilibili.playershared.LimitActionType
	18, // 29: bilibili.playershared.DolbyItem.type:type_name -> bilibili.playershared.DolbyItem.Type
	30, // 30: bilibili.playershared.DolbyItem.audio:type_name -> bilibili.playershared.DashItem
	36, // 31: bilibili.playershared.EpInlineVideoInfo.ep_inline_video:type_name -> bilibili.playershared.EpInlineVideo
	64, // 32: bilibili.playershared.Event.shake:type_name -> bilibili.playershared.Shake
	7,  // 33: bilibili.playershared.ExtData.type:type_name -> bilibili.playershared.ExtDataType
	56, // 34: bilibili.playershared.ExtData.play_list_info:type_name -> bilibili.playershared.PlayListInfo
	42, // 35: bilibili.playershared.Fragment.infos:type_name -> bilibili.playershared.FragmentInfo
	8,  // 36: bilibili.playershared.FragmentInfo.fragment_position:type_name -> bilibili.playershared.FragmentPosition
	9,  // 37: bilibili.playershared.FragmentInfo.fragment_type:type_name -> bilibili.playershared.FragmentType
	81, // 38: bilibili.playershared.FragmentInfo.report:type_name -> google.protobuf.Any
	44, // 39: bilibili.playershared.FragmentVideo.videos:type_name -> bilibili.playershared.FragmentVideoInfo
	42, // 40: bilibili.playershared.FragmentVideoInfo.fragment_info:type_name -> bilibili.playershared.FragmentInfo
	73, // 41: bilibili.playershared.FragmentVideoInfo.vod_info:type_name -> bilibili.playershared.VodInfo
	53, // 42: bilibili.playershared.FragmentVideoInfo.play_arc_conf:type_name -> bilibili.playershared.PlayArcConf
	34, // 43: bilibili.playershared.FragmentVideoInfo.dimension:type_name -> bilibili.playershared.Dimension
	1,  // 44: bilibili.playershared.FragmentVideoInfo.video_type:type_name -> bilibili.playershared.BizType
	47, // 45: bilibili.playershared.History.current_video:type_name -> bilibili.playershared.HistoryInfo
	47, // 46: bilibili.playershared.History.related_video:type_name -> bilibili.playershared.HistoryInfo
	70, // 47: bilibili.playershared.HistoryInfo.toast:type_name -> bilibili.playershared.Toast
	70, // 48: bilibili.playershared.HistoryInfo.toast_without_time:type_name -> bilibili.playershared.Toast
	51, // 49: bilibili.playershared.Interaction.history_node:type_name -> bilibili.playershared.Node
	30, // 50: bilibili.playershared.LossLessItem.audio:type_name -> bilibili.playershared.DashItem
	1,  // 51: bilibili.playershared.PlayArc.video_type:type_name -> bilibili.playershared.BizType
	5,  // 52: bilibili.playershared.PlayArc.drm_tech_type:type_name -> bilibili.playershared.DrmTechType
	0,  // 53: bilibili.playershared.PlayArc.arc_type:type_name -> bilibili.playershared.ArcType
	49, // 54: bilibili.playershared.PlayArc.interaction:type_name -> bilibili.playershared.Interaction
	34, // 55: bilibili.playershared.PlayArc.dimension:type_name -> bilibili.playershared.Dimension
	78, // 56: bilibili.playershared.PlayArcConf.arc_confs:type_name -> bilibili.playershared.PlayArcConf.ArcConfsEntry
	79, // 57: bilibili.playershared.PlayDeviceConf.device_confs:type_name -> bilibili.playershared.PlayDeviceConf.DeviceConfsEntry
	22, // 58: bilibili.playershared.PlayList.badge_info:type_name -> bilibili.playershared.BadgeInfo
	55, // 59: bilibili.playershared.PlayListInfo.play_list:type_name -> bilibili.playershared.PlayList
	69, // 60: bilibili.playershared.PromptBar.title:type_name -> bilibili.playershared.TextInfo
	69, // 61: bilibili.playershared.PromptBar.subtitle:type_name -> bilibili.playershared.TextInfo
	45, // 62: bilibili.playershared.PromptBar.bg_gradient_color:type_name -> bilibili.playershared.GradientColor
	27, // 63: bilibili.playershared.PromptBar.button:type_name -> bilibili.playershared.ButtonInfo
	59, // 64: bilibili.playershared.PromptBar.report:type_name -> bilibili.playershared.Report
	45, // 65: bilibili.playershared.PromptBar.full_screen_bg_gradient_color:type_name -> bilibili.playershared.GradientColor
	14, // 66: bilibili.playershared.PromptBar.prompt_bar_type:type_name -> bilibili.playershared.PromptBarType
	13, // 67: bilibili.playershared.PromptBar.prompt_bar_style:type_name -> bilibili.playershared.PromptBarStyle
	24, // 68: bilibili.playershared.PromptBar.benefit_infos:type_name -> bilibili.playershared.BenefitInfo
	70, // 69: bilibili.playershared.QnTrialInfo.start_toast:type_name -> bilibili.playershared.Toast
	70, // 70: bilibili.playershared.QnTrialInfo.end_toast:type_name -> bilibili.playershared.Toast
	26, // 71: bilibili.playershared.QnTrialInfo.quality_open_tip_btn:type_name -> bilibili.playershared.Button
	30, // 72: bilibili.playershared.ResponseDash.video:type_name -> bilibili.playershared.DashItem
	30, // 73: bilibili.playershared.ResponseDash.audio:type_name -> bilibili.playershared.DashItem
	19, // 74: bilibili.playershared.Scheme.action_type:type_name -> bilibili.playershared.Scheme.ActionType
	61, // 75: bilibili.playershared.SegmentVideo.segment:type_name -> bilibili.playershared.ResponseUrl
	66, // 76: bilibili.playershared.Stream.stream_info:type_name -> bilibili.playershared.StreamInfo
	31, // 77: bilibili.playershared.Stream.dash_video:type_name -> bilibili.playershared.DashVideo
	63, // 78: bilibili.playershared.Stream.segment_video:type_name -> bilibili.playershared.SegmentVideo
	67, // 79: bilibili.playershared.StreamInfo.limit:type_name -> bilibili.playershared.StreamLimit
	62, // 80: bilibili.playershared.StreamInfo.scheme:type_name -> bilibili.playershared.Scheme
	26, // 81: bilibili.playershared.Toast.button:type_name -> bilibili.playershared.Button
	3,  // 82: bilibili.playershared.VideoVod.prefer_codec_type:type_name -> bilibili.playershared.CodeType
	80, // 83: bilibili.playershared.ViewInfo.dialog_map:type_name -> bilibili.playershared.ViewInfo.DialogMapEntry
	57, // 84: bilibili.playershared.ViewInfo.prompt_bar:type_name -> bilibili.playershared.PromptBar
	28, // 85: bilibili.playershared.ViewInfo.toasts:type_name -> bilibili.playershared.ComprehensiveToast
	65, // 86: bilibili.playershared.VodInfo.stream_list:type_name -> bilibili.playershared.Stream
	30, // 87: bilibili.playershared.VodInfo.dash_audio:type_name -> bilibili.playershared.DashItem
	35, // 88: bilibili.playershared.VodInfo.dolby:type_name -> bilibili.playershared.DolbyItem
	74, // 89: bilibili.playershared.VodInfo.volume:type_name -> bilibili.playershared.VolumeInfo
	50, // 90: bilibili.playershared.VodInfo.loss_less_item:type_name -> bilibili.playershared.LossLessItem
	20, // 91: bilibili.playershared.PlayArcConf.ArcConfsEntry.value:type_name -> bilibili.playershared.ArcConf
	32, // 92: bilibili.playershared.PlayDeviceConf.DeviceConfsEntry.value:type_name -> bilibili.playershared.DeviceConf
	33, // 93: bilibili.playershared.ViewInfo.DialogMapEntry.value:type_name -> bilibili.playershared.Dialog
	94, // [94:94] is the sub-list for method output_type
	94, // [94:94] is the sub-list for method input_type
	94, // [94:94] is the sub-list for extension type_name
	94, // [94:94] is the sub-list for extension extendee
	0,  // [0:94] is the sub-list for field type_name
}

func init() { file_bilibili_playershared_playershared_proto_init() }
func file_bilibili_playershared_playershared_proto_init() {
	if File_bilibili_playershared_playershared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bilibili_playershared_playershared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenefitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottomDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComprehensiveToast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DashVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DolbyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpInlineVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpInlineVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossLessItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayArc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayArcConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayDeviceConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QnTrialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoVod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bilibili_playershared_playershared_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bilibili_playershared_playershared_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ConfValue_SwitchVal)(nil),
		(*ConfValue_SelectedVal)(nil),
	}
	file_bilibili_playershared_playershared_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ExtData_PlayListInfo)(nil),
	}
	file_bilibili_playershared_playershared_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*Stream_DashVideo)(nil),
		(*Stream_SegmentVideo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bilibili_playershared_playershared_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bilibili_playershared_playershared_proto_goTypes,
		DependencyIndexes: file_bilibili_playershared_playershared_proto_depIdxs,
		EnumInfos:         file_bilibili_playershared_playershared_proto_enumTypes,
		MessageInfos:      file_bilibili_playershared_playershared_proto_msgTypes,
	}.Build()
	File_bilibili_playershared_playershared_proto = out.File
	file_bilibili_playershared_playershared_proto_rawDesc = nil
	file_bilibili_playershared_playershared_proto_goTypes = nil
	file_bilibili_playershared_playershared_proto_depIdxs = nil
}
