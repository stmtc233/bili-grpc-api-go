// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bilibili/dynamic/interfaces/feed/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "https://github.com/stmtc233/bili-grpc-api-go/bilibili/dynamic/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Feed_AddDynamicReport_FullMethodName            = "/bilibili.dynamic.interfaces.feed.v1.Feed/AddDynamicReport"
	Feed_AtList_FullMethodName                      = "/bilibili.dynamic.interfaces.feed.v1.Feed/AtList"
	Feed_AtSearch_FullMethodName                    = "/bilibili.dynamic.interfaces.feed.v1.Feed/AtSearch"
	Feed_AttachCardButton_FullMethodName            = "/bilibili.dynamic.interfaces.feed.v1.Feed/AttachCardButton"
	Feed_Config_FullMethodName                      = "/bilibili.dynamic.interfaces.feed.v1.Feed/Config"
	Feed_CreateDyn_FullMethodName                   = "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateDyn"
	Feed_CreateInitCheck_FullMethodName             = "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateInitCheck"
	Feed_CreatePageInfos_FullMethodName             = "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePageInfos"
	Feed_CreatePermissionButtonClick_FullMethodName = "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePermissionButtonClick"
	Feed_CreatePlusButtonClick_FullMethodName       = "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePlusButtonClick"
	Feed_DynamicButtonClick_FullMethodName          = "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicButtonClick"
	Feed_DynamicRepost_FullMethodName               = "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicRepost"
	Feed_DynamicThumb_FullMethodName                = "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicThumb"
	Feed_EditDyn_FullMethodName                     = "/bilibili.dynamic.interfaces.feed.v1.Feed/EditDyn"
	Feed_GetEditDynInfo_FullMethodName              = "/bilibili.dynamic.interfaces.feed.v1.Feed/GetEditDynInfo"
	Feed_GetUidByName_FullMethodName                = "/bilibili.dynamic.interfaces.feed.v1.Feed/GetUidByName"
	Feed_GoodsAttachCardPreview_FullMethodName      = "/bilibili.dynamic.interfaces.feed.v1.Feed/GoodsAttachCardPreview"
	Feed_HomeBubbleReport_FullMethodName            = "/bilibili.dynamic.interfaces.feed.v1.Feed/HomeBubbleReport"
	Feed_HotSearch_FullMethodName                   = "/bilibili.dynamic.interfaces.feed.v1.Feed/HotSearch"
	Feed_ICreateGoodsReplySync_FullMethodName       = "/bilibili.dynamic.interfaces.feed.v1.Feed/ICreateGoodsReplySync"
	Feed_NearbyPoiList_FullMethodName               = "/bilibili.dynamic.interfaces.feed.v1.Feed/NearbyPoiList"
	Feed_ReserveButtonClick_FullMethodName          = "/bilibili.dynamic.interfaces.feed.v1.Feed/ReserveButtonClick"
	Feed_RmDyn_FullMethodName                       = "/bilibili.dynamic.interfaces.feed.v1.Feed/RmDyn"
	Feed_RmSpaceTop_FullMethodName                  = "/bilibili.dynamic.interfaces.feed.v1.Feed/RmSpaceTop"
	Feed_SearchPoiList_FullMethodName               = "/bilibili.dynamic.interfaces.feed.v1.Feed/SearchPoiList"
	Feed_SetSpaceTop_FullMethodName                 = "/bilibili.dynamic.interfaces.feed.v1.Feed/SetSpaceTop"
	Feed_SubmitCheck_FullMethodName                 = "/bilibili.dynamic.interfaces.feed.v1.Feed/SubmitCheck"
	Feed_Suggest_FullMethodName                     = "/bilibili.dynamic.interfaces.feed.v1.Feed/Suggest"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	AddDynamicReport(ctx context.Context, in *AddDynamicReportReq, opts ...grpc.CallOption) (*AddDynamicReportRsp, error)
	// at用户推荐列表
	AtList(ctx context.Context, in *common.AtListReq, opts ...grpc.CallOption) (*common.AtListRsp, error)
	// at用户搜索列表
	AtSearch(ctx context.Context, in *common.AtSearchReq, opts ...grpc.CallOption) (*common.AtListRsp, error)
	AttachCardButton(ctx context.Context, in *AttachCardButtonReq, opts ...grpc.CallOption) (*AttachCardButtonRsp, error)
	Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRsp, error)
	// 创建动态
	CreateDyn(ctx context.Context, in *CreateDynReq, opts ...grpc.CallOption) (*common.CreateResp, error)
	// 发布页预校验
	CreateInitCheck(ctx context.Context, in *CreateInitCheckReq, opts ...grpc.CallOption) (*common.CreateCheckResp, error)
	CreatePageInfos(ctx context.Context, in *CreatePageInfosReq, opts ...grpc.CallOption) (*CreatePageInfosRsp, error)
	CreatePermissionButtonClick(ctx context.Context, in *CreatePermissionButtonClickReq, opts ...grpc.CallOption) (*CreatePermissionButtonClickRsp, error)
	CreatePlusButtonClick(ctx context.Context, in *CreatePlusButtonClickReq, opts ...grpc.CallOption) (*CreatePlusButtonClickRsp, error)
	DynamicButtonClick(ctx context.Context, in *DynamicButtonClickReq, opts ...grpc.CallOption) (*DynamicButtonClickRsp, error)
	DynamicRepost(ctx context.Context, in *DynamicRepostReq, opts ...grpc.CallOption) (*common.CreateResp, error)
	DynamicThumb(ctx context.Context, in *DynamicThumbReq, opts ...grpc.CallOption) (*DynamicThumbRsp, error)
	EditDyn(ctx context.Context, in *EditDynReq, opts ...grpc.CallOption) (*EditDynRsp, error)
	GetEditDynInfo(ctx context.Context, in *GetEditDynInfoReq, opts ...grpc.CallOption) (*GetEditDynInfoRsp, error)
	// 根据name取uid
	GetUidByName(ctx context.Context, in *common.GetUidByNameReq, opts ...grpc.CallOption) (*common.GetUidByNameRsp, error)
	GoodsAttachCardPreview(ctx context.Context, in *GoodsAttachCardPreviewReq, opts ...grpc.CallOption) (*GoodsAttachCardPreviewRsp, error)
	HomeBubbleReport(ctx context.Context, in *HomeBubbleReportReq, opts ...grpc.CallOption) (*HomeBubbleReportRsp, error)
	HotSearch(ctx context.Context, in *HotSearchReq, opts ...grpc.CallOption) (*HotSearchRsp, error)
	ICreateGoodsReplySync(ctx context.Context, in *ICreateGoodsReplySyncReq, opts ...grpc.CallOption) (*ICreateResp, error)
	NearbyPoiList(ctx context.Context, in *NearbyPoiListReq, opts ...grpc.CallOption) (*NearbyPoiListRsp, error)
	ReserveButtonClick(ctx context.Context, in *ReserveButtonClickReq, opts ...grpc.CallOption) (*ReserveButtonClickResp, error)
	RmDyn(ctx context.Context, in *RmDynReq, opts ...grpc.CallOption) (*RmDynRsp, error)
	RmSpaceTop(ctx context.Context, in *RmSpaceTopReq, opts ...grpc.CallOption) (*RmSpaceTopRsp, error)
	SearchPoiList(ctx context.Context, in *SearchPoiListReq, opts ...grpc.CallOption) (*SearchPoiListRsp, error)
	SetSpaceTop(ctx context.Context, in *SetSpaceTopReq, opts ...grpc.CallOption) (*SetSpaceTopRsp, error)
	SubmitCheck(ctx context.Context, in *SubmitCheckReq, opts ...grpc.CallOption) (*SubmitCheckRsp, error)
	Suggest(ctx context.Context, in *SuggestReq, opts ...grpc.CallOption) (*SuggestRsp, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) AddDynamicReport(ctx context.Context, in *AddDynamicReportReq, opts ...grpc.CallOption) (*AddDynamicReportRsp, error) {
	out := new(AddDynamicReportRsp)
	err := c.cc.Invoke(ctx, Feed_AddDynamicReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) AtList(ctx context.Context, in *common.AtListReq, opts ...grpc.CallOption) (*common.AtListRsp, error) {
	out := new(common.AtListRsp)
	err := c.cc.Invoke(ctx, Feed_AtList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) AtSearch(ctx context.Context, in *common.AtSearchReq, opts ...grpc.CallOption) (*common.AtListRsp, error) {
	out := new(common.AtListRsp)
	err := c.cc.Invoke(ctx, Feed_AtSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) AttachCardButton(ctx context.Context, in *AttachCardButtonReq, opts ...grpc.CallOption) (*AttachCardButtonRsp, error) {
	out := new(AttachCardButtonRsp)
	err := c.cc.Invoke(ctx, Feed_AttachCardButton_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) Config(ctx context.Context, in *ConfigReq, opts ...grpc.CallOption) (*ConfigRsp, error) {
	out := new(ConfigRsp)
	err := c.cc.Invoke(ctx, Feed_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreateDyn(ctx context.Context, in *CreateDynReq, opts ...grpc.CallOption) (*common.CreateResp, error) {
	out := new(common.CreateResp)
	err := c.cc.Invoke(ctx, Feed_CreateDyn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreateInitCheck(ctx context.Context, in *CreateInitCheckReq, opts ...grpc.CallOption) (*common.CreateCheckResp, error) {
	out := new(common.CreateCheckResp)
	err := c.cc.Invoke(ctx, Feed_CreateInitCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreatePageInfos(ctx context.Context, in *CreatePageInfosReq, opts ...grpc.CallOption) (*CreatePageInfosRsp, error) {
	out := new(CreatePageInfosRsp)
	err := c.cc.Invoke(ctx, Feed_CreatePageInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreatePermissionButtonClick(ctx context.Context, in *CreatePermissionButtonClickReq, opts ...grpc.CallOption) (*CreatePermissionButtonClickRsp, error) {
	out := new(CreatePermissionButtonClickRsp)
	err := c.cc.Invoke(ctx, Feed_CreatePermissionButtonClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CreatePlusButtonClick(ctx context.Context, in *CreatePlusButtonClickReq, opts ...grpc.CallOption) (*CreatePlusButtonClickRsp, error) {
	out := new(CreatePlusButtonClickRsp)
	err := c.cc.Invoke(ctx, Feed_CreatePlusButtonClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) DynamicButtonClick(ctx context.Context, in *DynamicButtonClickReq, opts ...grpc.CallOption) (*DynamicButtonClickRsp, error) {
	out := new(DynamicButtonClickRsp)
	err := c.cc.Invoke(ctx, Feed_DynamicButtonClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) DynamicRepost(ctx context.Context, in *DynamicRepostReq, opts ...grpc.CallOption) (*common.CreateResp, error) {
	out := new(common.CreateResp)
	err := c.cc.Invoke(ctx, Feed_DynamicRepost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) DynamicThumb(ctx context.Context, in *DynamicThumbReq, opts ...grpc.CallOption) (*DynamicThumbRsp, error) {
	out := new(DynamicThumbRsp)
	err := c.cc.Invoke(ctx, Feed_DynamicThumb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) EditDyn(ctx context.Context, in *EditDynReq, opts ...grpc.CallOption) (*EditDynRsp, error) {
	out := new(EditDynRsp)
	err := c.cc.Invoke(ctx, Feed_EditDyn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetEditDynInfo(ctx context.Context, in *GetEditDynInfoReq, opts ...grpc.CallOption) (*GetEditDynInfoRsp, error) {
	out := new(GetEditDynInfoRsp)
	err := c.cc.Invoke(ctx, Feed_GetEditDynInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetUidByName(ctx context.Context, in *common.GetUidByNameReq, opts ...grpc.CallOption) (*common.GetUidByNameRsp, error) {
	out := new(common.GetUidByNameRsp)
	err := c.cc.Invoke(ctx, Feed_GetUidByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GoodsAttachCardPreview(ctx context.Context, in *GoodsAttachCardPreviewReq, opts ...grpc.CallOption) (*GoodsAttachCardPreviewRsp, error) {
	out := new(GoodsAttachCardPreviewRsp)
	err := c.cc.Invoke(ctx, Feed_GoodsAttachCardPreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) HomeBubbleReport(ctx context.Context, in *HomeBubbleReportReq, opts ...grpc.CallOption) (*HomeBubbleReportRsp, error) {
	out := new(HomeBubbleReportRsp)
	err := c.cc.Invoke(ctx, Feed_HomeBubbleReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) HotSearch(ctx context.Context, in *HotSearchReq, opts ...grpc.CallOption) (*HotSearchRsp, error) {
	out := new(HotSearchRsp)
	err := c.cc.Invoke(ctx, Feed_HotSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ICreateGoodsReplySync(ctx context.Context, in *ICreateGoodsReplySyncReq, opts ...grpc.CallOption) (*ICreateResp, error) {
	out := new(ICreateResp)
	err := c.cc.Invoke(ctx, Feed_ICreateGoodsReplySync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) NearbyPoiList(ctx context.Context, in *NearbyPoiListReq, opts ...grpc.CallOption) (*NearbyPoiListRsp, error) {
	out := new(NearbyPoiListRsp)
	err := c.cc.Invoke(ctx, Feed_NearbyPoiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ReserveButtonClick(ctx context.Context, in *ReserveButtonClickReq, opts ...grpc.CallOption) (*ReserveButtonClickResp, error) {
	out := new(ReserveButtonClickResp)
	err := c.cc.Invoke(ctx, Feed_ReserveButtonClick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) RmDyn(ctx context.Context, in *RmDynReq, opts ...grpc.CallOption) (*RmDynRsp, error) {
	out := new(RmDynRsp)
	err := c.cc.Invoke(ctx, Feed_RmDyn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) RmSpaceTop(ctx context.Context, in *RmSpaceTopReq, opts ...grpc.CallOption) (*RmSpaceTopRsp, error) {
	out := new(RmSpaceTopRsp)
	err := c.cc.Invoke(ctx, Feed_RmSpaceTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) SearchPoiList(ctx context.Context, in *SearchPoiListReq, opts ...grpc.CallOption) (*SearchPoiListRsp, error) {
	out := new(SearchPoiListRsp)
	err := c.cc.Invoke(ctx, Feed_SearchPoiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) SetSpaceTop(ctx context.Context, in *SetSpaceTopReq, opts ...grpc.CallOption) (*SetSpaceTopRsp, error) {
	out := new(SetSpaceTopRsp)
	err := c.cc.Invoke(ctx, Feed_SetSpaceTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) SubmitCheck(ctx context.Context, in *SubmitCheckReq, opts ...grpc.CallOption) (*SubmitCheckRsp, error) {
	out := new(SubmitCheckRsp)
	err := c.cc.Invoke(ctx, Feed_SubmitCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) Suggest(ctx context.Context, in *SuggestReq, opts ...grpc.CallOption) (*SuggestRsp, error) {
	out := new(SuggestRsp)
	err := c.cc.Invoke(ctx, Feed_Suggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	AddDynamicReport(context.Context, *AddDynamicReportReq) (*AddDynamicReportRsp, error)
	// at用户推荐列表
	AtList(context.Context, *common.AtListReq) (*common.AtListRsp, error)
	// at用户搜索列表
	AtSearch(context.Context, *common.AtSearchReq) (*common.AtListRsp, error)
	AttachCardButton(context.Context, *AttachCardButtonReq) (*AttachCardButtonRsp, error)
	Config(context.Context, *ConfigReq) (*ConfigRsp, error)
	// 创建动态
	CreateDyn(context.Context, *CreateDynReq) (*common.CreateResp, error)
	// 发布页预校验
	CreateInitCheck(context.Context, *CreateInitCheckReq) (*common.CreateCheckResp, error)
	CreatePageInfos(context.Context, *CreatePageInfosReq) (*CreatePageInfosRsp, error)
	CreatePermissionButtonClick(context.Context, *CreatePermissionButtonClickReq) (*CreatePermissionButtonClickRsp, error)
	CreatePlusButtonClick(context.Context, *CreatePlusButtonClickReq) (*CreatePlusButtonClickRsp, error)
	DynamicButtonClick(context.Context, *DynamicButtonClickReq) (*DynamicButtonClickRsp, error)
	DynamicRepost(context.Context, *DynamicRepostReq) (*common.CreateResp, error)
	DynamicThumb(context.Context, *DynamicThumbReq) (*DynamicThumbRsp, error)
	EditDyn(context.Context, *EditDynReq) (*EditDynRsp, error)
	GetEditDynInfo(context.Context, *GetEditDynInfoReq) (*GetEditDynInfoRsp, error)
	// 根据name取uid
	GetUidByName(context.Context, *common.GetUidByNameReq) (*common.GetUidByNameRsp, error)
	GoodsAttachCardPreview(context.Context, *GoodsAttachCardPreviewReq) (*GoodsAttachCardPreviewRsp, error)
	HomeBubbleReport(context.Context, *HomeBubbleReportReq) (*HomeBubbleReportRsp, error)
	HotSearch(context.Context, *HotSearchReq) (*HotSearchRsp, error)
	ICreateGoodsReplySync(context.Context, *ICreateGoodsReplySyncReq) (*ICreateResp, error)
	NearbyPoiList(context.Context, *NearbyPoiListReq) (*NearbyPoiListRsp, error)
	ReserveButtonClick(context.Context, *ReserveButtonClickReq) (*ReserveButtonClickResp, error)
	RmDyn(context.Context, *RmDynReq) (*RmDynRsp, error)
	RmSpaceTop(context.Context, *RmSpaceTopReq) (*RmSpaceTopRsp, error)
	SearchPoiList(context.Context, *SearchPoiListReq) (*SearchPoiListRsp, error)
	SetSpaceTop(context.Context, *SetSpaceTopReq) (*SetSpaceTopRsp, error)
	SubmitCheck(context.Context, *SubmitCheckReq) (*SubmitCheckRsp, error)
	Suggest(context.Context, *SuggestReq) (*SuggestRsp, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) AddDynamicReport(context.Context, *AddDynamicReportReq) (*AddDynamicReportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynamicReport not implemented")
}
func (UnimplementedFeedServer) AtList(context.Context, *common.AtListReq) (*common.AtListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtList not implemented")
}
func (UnimplementedFeedServer) AtSearch(context.Context, *common.AtSearchReq) (*common.AtListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtSearch not implemented")
}
func (UnimplementedFeedServer) AttachCardButton(context.Context, *AttachCardButtonReq) (*AttachCardButtonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachCardButton not implemented")
}
func (UnimplementedFeedServer) Config(context.Context, *ConfigReq) (*ConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedFeedServer) CreateDyn(context.Context, *CreateDynReq) (*common.CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDyn not implemented")
}
func (UnimplementedFeedServer) CreateInitCheck(context.Context, *CreateInitCheckReq) (*common.CreateCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInitCheck not implemented")
}
func (UnimplementedFeedServer) CreatePageInfos(context.Context, *CreatePageInfosReq) (*CreatePageInfosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePageInfos not implemented")
}
func (UnimplementedFeedServer) CreatePermissionButtonClick(context.Context, *CreatePermissionButtonClickReq) (*CreatePermissionButtonClickRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionButtonClick not implemented")
}
func (UnimplementedFeedServer) CreatePlusButtonClick(context.Context, *CreatePlusButtonClickReq) (*CreatePlusButtonClickRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlusButtonClick not implemented")
}
func (UnimplementedFeedServer) DynamicButtonClick(context.Context, *DynamicButtonClickReq) (*DynamicButtonClickRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicButtonClick not implemented")
}
func (UnimplementedFeedServer) DynamicRepost(context.Context, *DynamicRepostReq) (*common.CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicRepost not implemented")
}
func (UnimplementedFeedServer) DynamicThumb(context.Context, *DynamicThumbReq) (*DynamicThumbRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DynamicThumb not implemented")
}
func (UnimplementedFeedServer) EditDyn(context.Context, *EditDynReq) (*EditDynRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDyn not implemented")
}
func (UnimplementedFeedServer) GetEditDynInfo(context.Context, *GetEditDynInfoReq) (*GetEditDynInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditDynInfo not implemented")
}
func (UnimplementedFeedServer) GetUidByName(context.Context, *common.GetUidByNameReq) (*common.GetUidByNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUidByName not implemented")
}
func (UnimplementedFeedServer) GoodsAttachCardPreview(context.Context, *GoodsAttachCardPreviewReq) (*GoodsAttachCardPreviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsAttachCardPreview not implemented")
}
func (UnimplementedFeedServer) HomeBubbleReport(context.Context, *HomeBubbleReportReq) (*HomeBubbleReportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeBubbleReport not implemented")
}
func (UnimplementedFeedServer) HotSearch(context.Context, *HotSearchReq) (*HotSearchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotSearch not implemented")
}
func (UnimplementedFeedServer) ICreateGoodsReplySync(context.Context, *ICreateGoodsReplySyncReq) (*ICreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICreateGoodsReplySync not implemented")
}
func (UnimplementedFeedServer) NearbyPoiList(context.Context, *NearbyPoiListReq) (*NearbyPoiListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearbyPoiList not implemented")
}
func (UnimplementedFeedServer) ReserveButtonClick(context.Context, *ReserveButtonClickReq) (*ReserveButtonClickResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveButtonClick not implemented")
}
func (UnimplementedFeedServer) RmDyn(context.Context, *RmDynReq) (*RmDynRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDyn not implemented")
}
func (UnimplementedFeedServer) RmSpaceTop(context.Context, *RmSpaceTopReq) (*RmSpaceTopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmSpaceTop not implemented")
}
func (UnimplementedFeedServer) SearchPoiList(context.Context, *SearchPoiListReq) (*SearchPoiListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPoiList not implemented")
}
func (UnimplementedFeedServer) SetSpaceTop(context.Context, *SetSpaceTopReq) (*SetSpaceTopRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpaceTop not implemented")
}
func (UnimplementedFeedServer) SubmitCheck(context.Context, *SubmitCheckReq) (*SubmitCheckRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCheck not implemented")
}
func (UnimplementedFeedServer) Suggest(context.Context, *SuggestReq) (*SuggestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_AddDynamicReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDynamicReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AddDynamicReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_AddDynamicReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AddDynamicReport(ctx, req.(*AddDynamicReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_AtList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AtListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AtList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_AtList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AtList(ctx, req.(*common.AtListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_AtSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AtSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AtSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_AtSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AtSearch(ctx, req.(*common.AtSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_AttachCardButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachCardButtonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).AttachCardButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_AttachCardButton_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).AttachCardButton(ctx, req.(*AttachCardButtonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Config(ctx, req.(*ConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreateDyn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDynReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreateDyn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreateDyn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreateDyn(ctx, req.(*CreateDynReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreateInitCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInitCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreateInitCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreateInitCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreateInitCheck(ctx, req.(*CreateInitCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreatePageInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreatePageInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreatePageInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreatePageInfos(ctx, req.(*CreatePageInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreatePermissionButtonClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionButtonClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreatePermissionButtonClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreatePermissionButtonClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreatePermissionButtonClick(ctx, req.(*CreatePermissionButtonClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CreatePlusButtonClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlusButtonClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreatePlusButtonClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_CreatePlusButtonClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreatePlusButtonClick(ctx, req.(*CreatePlusButtonClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_DynamicButtonClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicButtonClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).DynamicButtonClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_DynamicButtonClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).DynamicButtonClick(ctx, req.(*DynamicButtonClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_DynamicRepost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicRepostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).DynamicRepost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_DynamicRepost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).DynamicRepost(ctx, req.(*DynamicRepostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_DynamicThumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicThumbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).DynamicThumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_DynamicThumb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).DynamicThumb(ctx, req.(*DynamicThumbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_EditDyn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDynReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).EditDyn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_EditDyn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).EditDyn(ctx, req.(*EditDynReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetEditDynInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditDynInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetEditDynInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GetEditDynInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetEditDynInfo(ctx, req.(*GetEditDynInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetUidByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetUidByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetUidByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GetUidByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetUidByName(ctx, req.(*common.GetUidByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GoodsAttachCardPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsAttachCardPreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GoodsAttachCardPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_GoodsAttachCardPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GoodsAttachCardPreview(ctx, req.(*GoodsAttachCardPreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_HomeBubbleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeBubbleReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).HomeBubbleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_HomeBubbleReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).HomeBubbleReport(ctx, req.(*HomeBubbleReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_HotSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).HotSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_HotSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).HotSearch(ctx, req.(*HotSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ICreateGoodsReplySync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICreateGoodsReplySyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ICreateGoodsReplySync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ICreateGoodsReplySync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ICreateGoodsReplySync(ctx, req.(*ICreateGoodsReplySyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_NearbyPoiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearbyPoiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).NearbyPoiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_NearbyPoiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).NearbyPoiList(ctx, req.(*NearbyPoiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ReserveButtonClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveButtonClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ReserveButtonClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_ReserveButtonClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ReserveButtonClick(ctx, req.(*ReserveButtonClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_RmDyn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmDynReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).RmDyn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_RmDyn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).RmDyn(ctx, req.(*RmDynReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_RmSpaceTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmSpaceTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).RmSpaceTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_RmSpaceTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).RmSpaceTop(ctx, req.(*RmSpaceTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_SearchPoiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPoiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).SearchPoiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_SearchPoiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).SearchPoiList(ctx, req.(*SearchPoiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_SetSpaceTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpaceTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).SetSpaceTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_SetSpaceTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).SetSpaceTop(ctx, req.(*SetSpaceTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_SubmitCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).SubmitCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_SubmitCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).SubmitCheck(ctx, req.(*SubmitCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Suggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Suggest(ctx, req.(*SuggestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.dynamic.interfaces.feed.v1.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDynamicReport",
			Handler:    _Feed_AddDynamicReport_Handler,
		},
		{
			MethodName: "AtList",
			Handler:    _Feed_AtList_Handler,
		},
		{
			MethodName: "AtSearch",
			Handler:    _Feed_AtSearch_Handler,
		},
		{
			MethodName: "AttachCardButton",
			Handler:    _Feed_AttachCardButton_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Feed_Config_Handler,
		},
		{
			MethodName: "CreateDyn",
			Handler:    _Feed_CreateDyn_Handler,
		},
		{
			MethodName: "CreateInitCheck",
			Handler:    _Feed_CreateInitCheck_Handler,
		},
		{
			MethodName: "CreatePageInfos",
			Handler:    _Feed_CreatePageInfos_Handler,
		},
		{
			MethodName: "CreatePermissionButtonClick",
			Handler:    _Feed_CreatePermissionButtonClick_Handler,
		},
		{
			MethodName: "CreatePlusButtonClick",
			Handler:    _Feed_CreatePlusButtonClick_Handler,
		},
		{
			MethodName: "DynamicButtonClick",
			Handler:    _Feed_DynamicButtonClick_Handler,
		},
		{
			MethodName: "DynamicRepost",
			Handler:    _Feed_DynamicRepost_Handler,
		},
		{
			MethodName: "DynamicThumb",
			Handler:    _Feed_DynamicThumb_Handler,
		},
		{
			MethodName: "EditDyn",
			Handler:    _Feed_EditDyn_Handler,
		},
		{
			MethodName: "GetEditDynInfo",
			Handler:    _Feed_GetEditDynInfo_Handler,
		},
		{
			MethodName: "GetUidByName",
			Handler:    _Feed_GetUidByName_Handler,
		},
		{
			MethodName: "GoodsAttachCardPreview",
			Handler:    _Feed_GoodsAttachCardPreview_Handler,
		},
		{
			MethodName: "HomeBubbleReport",
			Handler:    _Feed_HomeBubbleReport_Handler,
		},
		{
			MethodName: "HotSearch",
			Handler:    _Feed_HotSearch_Handler,
		},
		{
			MethodName: "ICreateGoodsReplySync",
			Handler:    _Feed_ICreateGoodsReplySync_Handler,
		},
		{
			MethodName: "NearbyPoiList",
			Handler:    _Feed_NearbyPoiList_Handler,
		},
		{
			MethodName: "ReserveButtonClick",
			Handler:    _Feed_ReserveButtonClick_Handler,
		},
		{
			MethodName: "RmDyn",
			Handler:    _Feed_RmDyn_Handler,
		},
		{
			MethodName: "RmSpaceTop",
			Handler:    _Feed_RmSpaceTop_Handler,
		},
		{
			MethodName: "SearchPoiList",
			Handler:    _Feed_SearchPoiList_Handler,
		},
		{
			MethodName: "SetSpaceTop",
			Handler:    _Feed_SetSpaceTop_Handler,
		},
		{
			MethodName: "SubmitCheck",
			Handler:    _Feed_SubmitCheck_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _Feed_Suggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/dynamic/interfaces/feed/v1/api.proto",
}
