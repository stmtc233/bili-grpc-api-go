// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: bilibili/dynamic/interfaces/campus/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Campus_ActionReport_FullMethodName = "/bilibili.dynamic.interfaces.campus.v1.Campus/ActionReport"
)

// CampusClient is the client API for Campus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampusClient interface {
	ActionReport(ctx context.Context, in *ActionReportReq, opts ...grpc.CallOption) (*ActionReportReply, error)
}

type campusClient struct {
	cc grpc.ClientConnInterface
}

func NewCampusClient(cc grpc.ClientConnInterface) CampusClient {
	return &campusClient{cc}
}

func (c *campusClient) ActionReport(ctx context.Context, in *ActionReportReq, opts ...grpc.CallOption) (*ActionReportReply, error) {
	out := new(ActionReportReply)
	err := c.cc.Invoke(ctx, Campus_ActionReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampusServer is the server API for Campus service.
// All implementations must embed UnimplementedCampusServer
// for forward compatibility
type CampusServer interface {
	ActionReport(context.Context, *ActionReportReq) (*ActionReportReply, error)
	mustEmbedUnimplementedCampusServer()
}

// UnimplementedCampusServer must be embedded to have forward compatible implementations.
type UnimplementedCampusServer struct {
}

func (UnimplementedCampusServer) ActionReport(context.Context, *ActionReportReq) (*ActionReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionReport not implemented")
}
func (UnimplementedCampusServer) mustEmbedUnimplementedCampusServer() {}

// UnsafeCampusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampusServer will
// result in compilation errors.
type UnsafeCampusServer interface {
	mustEmbedUnimplementedCampusServer()
}

func RegisterCampusServer(s grpc.ServiceRegistrar, srv CampusServer) {
	s.RegisterService(&Campus_ServiceDesc, srv)
}

func _Campus_ActionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServer).ActionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Campus_ActionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServer).ActionReport(ctx, req.(*ActionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Campus_ServiceDesc is the grpc.ServiceDesc for Campus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Campus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.dynamic.interfaces.campus.v1.Campus",
	HandlerType: (*CampusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionReport",
			Handler:    _Campus_ActionReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilibili/dynamic/interfaces/campus/v1/api.proto",
}
